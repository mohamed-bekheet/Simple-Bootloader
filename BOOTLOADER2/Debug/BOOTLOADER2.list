
BOOTLOADER2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080022ac  080022ac  000122ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002360  08002360  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002360  08002360  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002360  08002360  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002360  08002360  00012360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002364  08002364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000084  080023ec  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  080023ec  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008740  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a99  00000000  00000000  000287ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000770  00000000  00000000  0002a288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b8  00000000  00000000  0002a9f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018590  00000000  00000000  0002b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007c94  00000000  00000000  00043640  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083cde  00000000  00000000  0004b2d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cefb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000219c  00000000  00000000  000cf030  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08002294 	.word	0x08002294

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08002294 	.word	0x08002294

0800014c <_write>:
static void BLINK(uint32_t time_ms);
static void BL_SWITCH_TO_APP(void);


int _write(int file, char *ptr, int len)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000158:	2300      	movs	r3, #0
 800015a:	617b      	str	r3, [r7, #20]
 800015c:	e00a      	b.n	8000174 <_write+0x28>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)ptr++, 1, 100);
 800015e:	68b9      	ldr	r1, [r7, #8]
 8000160:	1c4b      	adds	r3, r1, #1
 8000162:	60bb      	str	r3, [r7, #8]
 8000164:	2364      	movs	r3, #100	; 0x64
 8000166:	2201      	movs	r2, #1
 8000168:	4807      	ldr	r0, [pc, #28]	; (8000188 <_write+0x3c>)
 800016a:	f001 f9d4 	bl	8001516 <HAL_UART_Transmit>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 800016e:	697b      	ldr	r3, [r7, #20]
 8000170:	3301      	adds	r3, #1
 8000172:	617b      	str	r3, [r7, #20]
 8000174:	697a      	ldr	r2, [r7, #20]
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	429a      	cmp	r2, r3
 800017a:	dbf0      	blt.n	800015e <_write+0x12>
	}
	return len;
 800017c:	687b      	ldr	r3, [r7, #4]
}
 800017e:	4618      	mov	r0, r3
 8000180:	3718      	adds	r7, #24
 8000182:	46bd      	mov	sp, r7
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	200000b8 	.word	0x200000b8

0800018c <BLINK>:

 void BLINK(uint32_t time_ms)
 {
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
 	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13 );
 8000194:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <BLINK+0x20>)
 800019a:	f000 fd39 	bl	8000c10 <HAL_GPIO_TogglePin>
 	HAL_Delay(time_ms);
 800019e:	6878      	ldr	r0, [r7, #4]
 80001a0:	f000 fabe 	bl	8000720 <HAL_Delay>
 }
 80001a4:	bf00      	nop
 80001a6:	3708      	adds	r7, #8
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	40011000 	.word	0x40011000

080001b0 <BL_SWITCH_TO_APP>:
void BL_SWITCH_TO_APP(void ){
 80001b0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80001b4:	b082      	sub	sp, #8
 80001b6:	af00      	add	r7, sp, #0
#if 1
	//check that frist word in APP is a RAM address this address contains the reset vector address in RAM "in this case start of stack at 20KB "
	if( ((*APP_START_FLASH_ADDRESS) & 0x2FFF50000) == 0x20000000){
 80001b8:	4b10      	ldr	r3, [pc, #64]	; (80001fc <BL_SWITCH_TO_APP+0x4c>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	469b      	mov	fp, r3
 80001be:	f04f 0c00 	mov.w	ip, #0
 80001c2:	490f      	ldr	r1, [pc, #60]	; (8000200 <BL_SWITCH_TO_APP+0x50>)
 80001c4:	f04f 0202 	mov.w	r2, #2
 80001c8:	ea0b 0301 	and.w	r3, fp, r1
 80001cc:	ea0c 0402 	and.w	r4, ip, r2
 80001d0:	2c00      	cmp	r4, #0
 80001d2:	bf08      	it	eq
 80001d4:	f1b3 5f00 	cmpeq.w	r3, #536870912	; 0x20000000
 80001d8:	d10a      	bne.n	80001f0 <BL_SWITCH_TO_APP+0x40>
		ptrF APP_JUMP = *(uint32_t *)(APP_START_FLASH_ADDRESS+1);
 80001da:	4b0a      	ldr	r3, [pc, #40]	; (8000204 <BL_SWITCH_TO_APP+0x54>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	607b      	str	r3, [r7, #4]
		__set_MSP(*(APP_START_FLASH_ADDRESS));
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <BL_SWITCH_TO_APP+0x4c>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	f383 8808 	msr	MSP, r3
		APP_JUMP();
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4798      	blx	r3
	{
		//there is no application installed
		printf("No APP found\r\n");
	}
#endif
}
 80001f0:	bf00      	nop
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80001fa:	bf00      	nop
 80001fc:	08002800 	.word	0x08002800
 8000200:	fff50000 	.word	0xfff50000
 8000204:	08002804 	.word	0x08002804

08000208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020e:	f000 fa25 	bl	800065c <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 8000212:	f000 f821 	bl	8000258 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000216:	f000 f885 	bl	8000324 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800021a:	f000 f859 	bl	80002d0 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800021e:	f001 fae5 	bl	80017ec <MX_FATFS_Init>

  int i=0;
 8000222:	2300      	movs	r3, #0
 8000224:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(i =0; i<20 ;i++){
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	e008      	b.n	800023e <main+0x36>
		  BLINK(100);
 800022c:	2064      	movs	r0, #100	; 0x64
 800022e:	f7ff ffad 	bl	800018c <BLINK>
		  printf("BL Running\n");
 8000232:	4807      	ldr	r0, [pc, #28]	; (8000250 <main+0x48>)
 8000234:	f001 fc24 	bl	8001a80 <puts>
	  for(i =0; i<20 ;i++){
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	3301      	adds	r3, #1
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2b13      	cmp	r3, #19
 8000242:	ddf3      	ble.n	800022c <main+0x24>
	  }
	  printf("Switching to APP .....\n");
 8000244:	4803      	ldr	r0, [pc, #12]	; (8000254 <main+0x4c>)
 8000246:	f001 fc1b 	bl	8001a80 <puts>
	  BL_SWITCH_TO_APP();
 800024a:	f7ff ffb1 	bl	80001b0 <BL_SWITCH_TO_APP>
	  for(i =0; i<20 ;i++){
 800024e:	e7ea      	b.n	8000226 <main+0x1e>
 8000250:	080022ac 	.word	0x080022ac
 8000254:	080022b8 	.word	0x080022b8

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b090      	sub	sp, #64	; 0x40
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	2228      	movs	r2, #40	; 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f001 fba6 	bl	80019b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027a:	2302      	movs	r3, #2
 800027c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027e:	2301      	movs	r3, #1
 8000280:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000282:	2310      	movs	r3, #16
 8000284:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000286:	2300      	movs	r3, #0
 8000288:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	4618      	mov	r0, r3
 8000290:	f000 fcd8 	bl	8000c44 <HAL_RCC_OscConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800029a:	f000 f883 	bl	80003a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	230f      	movs	r3, #15
 80002a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a2:	2300      	movs	r3, #0
 80002a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 ff44 	bl	8001144 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002c2:	f000 f86f 	bl	80003a4 <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3740      	adds	r7, #64	; 0x40
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <MX_USART2_UART_Init+0x4c>)
 80002d6:	4a12      	ldr	r2, [pc, #72]	; (8000320 <MX_USART2_UART_Init+0x50>)
 80002d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <MX_USART2_UART_Init+0x4c>)
 80002dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <MX_USART2_UART_Init+0x4c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <MX_USART2_UART_Init+0x4c>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <MX_USART2_UART_Init+0x4c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <MX_USART2_UART_Init+0x4c>)
 80002f6:	220c      	movs	r2, #12
 80002f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002fa:	4b08      	ldr	r3, [pc, #32]	; (800031c <MX_USART2_UART_Init+0x4c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <MX_USART2_UART_Init+0x4c>)
 8000302:	2200      	movs	r2, #0
 8000304:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000306:	4805      	ldr	r0, [pc, #20]	; (800031c <MX_USART2_UART_Init+0x4c>)
 8000308:	f001 f8b8 	bl	800147c <HAL_UART_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000312:	f000 f847 	bl	80003a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	200000b8 	.word	0x200000b8
 8000320:	40004400 	.word	0x40004400

08000324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032a:	f107 0308 	add.w	r3, r7, #8
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000338:	4b18      	ldr	r3, [pc, #96]	; (800039c <MX_GPIO_Init+0x78>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a17      	ldr	r2, [pc, #92]	; (800039c <MX_GPIO_Init+0x78>)
 800033e:	f043 0310 	orr.w	r3, r3, #16
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b15      	ldr	r3, [pc, #84]	; (800039c <MX_GPIO_Init+0x78>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0310 	and.w	r3, r3, #16
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000350:	4b12      	ldr	r3, [pc, #72]	; (800039c <MX_GPIO_Init+0x78>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a11      	ldr	r2, [pc, #68]	; (800039c <MX_GPIO_Init+0x78>)
 8000356:	f043 0304 	orr.w	r3, r3, #4
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_GPIO_Init+0x78>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0304 	and.w	r3, r3, #4
 8000364:	603b      	str	r3, [r7, #0]
 8000366:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800036e:	480c      	ldr	r0, [pc, #48]	; (80003a0 <MX_GPIO_Init+0x7c>)
 8000370:	f000 fc36 	bl	8000be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000378:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037a:	2301      	movs	r3, #1
 800037c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000382:	2302      	movs	r3, #2
 8000384:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000386:	f107 0308 	add.w	r3, r7, #8
 800038a:	4619      	mov	r1, r3
 800038c:	4804      	ldr	r0, [pc, #16]	; (80003a0 <MX_GPIO_Init+0x7c>)
 800038e:	f000 facd 	bl	800092c <HAL_GPIO_Init>

}
 8000392:	bf00      	nop
 8000394:	3718      	adds	r7, #24
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40021000 	.word	0x40021000
 80003a0:	40011000 	.word	0x40011000

080003a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr

080003b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <HAL_MspInit+0x5c>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4a14      	ldr	r2, [pc, #80]	; (800040c <HAL_MspInit+0x5c>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6193      	str	r3, [r2, #24]
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <HAL_MspInit+0x5c>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	60bb      	str	r3, [r7, #8]
 80003cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <HAL_MspInit+0x5c>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	4a0e      	ldr	r2, [pc, #56]	; (800040c <HAL_MspInit+0x5c>)
 80003d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d8:	61d3      	str	r3, [r2, #28]
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <HAL_MspInit+0x5c>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <HAL_MspInit+0x60>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	4a04      	ldr	r2, [pc, #16]	; (8000410 <HAL_MspInit+0x60>)
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000402:	bf00      	nop
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000
 8000410:	40010000 	.word	0x40010000

08000414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b088      	sub	sp, #32
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041c:	f107 0310 	add.w	r3, r7, #16
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
 8000428:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a1b      	ldr	r2, [pc, #108]	; (800049c <HAL_UART_MspInit+0x88>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d12f      	bne.n	8000494 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000434:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <HAL_UART_MspInit+0x8c>)
 8000436:	69db      	ldr	r3, [r3, #28]
 8000438:	4a19      	ldr	r2, [pc, #100]	; (80004a0 <HAL_UART_MspInit+0x8c>)
 800043a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800043e:	61d3      	str	r3, [r2, #28]
 8000440:	4b17      	ldr	r3, [pc, #92]	; (80004a0 <HAL_UART_MspInit+0x8c>)
 8000442:	69db      	ldr	r3, [r3, #28]
 8000444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800044c:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <HAL_UART_MspInit+0x8c>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a13      	ldr	r2, [pc, #76]	; (80004a0 <HAL_UART_MspInit+0x8c>)
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <HAL_UART_MspInit+0x8c>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0304 	and.w	r3, r3, #4
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000464:	2304      	movs	r3, #4
 8000466:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000468:	2302      	movs	r3, #2
 800046a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046c:	2303      	movs	r3, #3
 800046e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4619      	mov	r1, r3
 8000476:	480b      	ldr	r0, [pc, #44]	; (80004a4 <HAL_UART_MspInit+0x90>)
 8000478:	f000 fa58 	bl	800092c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800047c:	2308      	movs	r3, #8
 800047e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	2300      	movs	r3, #0
 8000486:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	4619      	mov	r1, r3
 800048e:	4805      	ldr	r0, [pc, #20]	; (80004a4 <HAL_UART_MspInit+0x90>)
 8000490:	f000 fa4c 	bl	800092c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000494:	bf00      	nop
 8000496:	3720      	adds	r7, #32
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40004400 	.word	0x40004400
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40010800 	.word	0x40010800

080004a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <HardFault_Handler+0x4>

080004ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <MemManage_Handler+0x4>

080004c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <BusFault_Handler+0x4>

080004c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <UsageFault_Handler+0x4>

080004cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f4:	f000 f8f8 	bl	80006e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	e00a      	b.n	8000524 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800050e:	f3af 8000 	nop.w
 8000512:	4601      	mov	r1, r0
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	60ba      	str	r2, [r7, #8]
 800051a:	b2ca      	uxtb	r2, r1
 800051c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	3301      	adds	r3, #1
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697a      	ldr	r2, [r7, #20]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	429a      	cmp	r2, r3
 800052a:	dbf0      	blt.n	800050e <_read+0x12>
	}

return len;
 800052c:	687b      	ldr	r3, [r7, #4]
}
 800052e:	4618      	mov	r0, r3
 8000530:	3718      	adds	r7, #24
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000536:	b480      	push	{r7}
 8000538:	b083      	sub	sp, #12
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
	return -1;
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800055c:	605a      	str	r2, [r3, #4]
	return 0;
 800055e:	2300      	movs	r3, #0
}
 8000560:	4618      	mov	r0, r3
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <_isatty>:

int _isatty(int file)
{
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
	return 1;
 8000572:	2301      	movs	r3, #1
}
 8000574:	4618      	mov	r0, r3
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr

0800057e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800057e:	b480      	push	{r7}
 8000580:	b085      	sub	sp, #20
 8000582:	af00      	add	r7, sp, #0
 8000584:	60f8      	str	r0, [r7, #12]
 8000586:	60b9      	str	r1, [r7, #8]
 8000588:	607a      	str	r2, [r7, #4]
	return 0;
 800058a:	2300      	movs	r3, #0
}
 800058c:	4618      	mov	r0, r3
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
	...

08000598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a0:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <_sbrk+0x5c>)
 80005a2:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <_sbrk+0x60>)
 80005a4:	1ad3      	subs	r3, r2, r3
 80005a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <_sbrk+0x64>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d102      	bne.n	80005ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <_sbrk+0x64>)
 80005b6:	4a12      	ldr	r2, [pc, #72]	; (8000600 <_sbrk+0x68>)
 80005b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <_sbrk+0x64>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4413      	add	r3, r2
 80005c2:	693a      	ldr	r2, [r7, #16]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d207      	bcs.n	80005d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005c8:	f001 f9cc 	bl	8001964 <__errno>
 80005cc:	4602      	mov	r2, r0
 80005ce:	230c      	movs	r3, #12
 80005d0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	e009      	b.n	80005ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <_sbrk+0x64>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <_sbrk+0x64>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	4a05      	ldr	r2, [pc, #20]	; (80005fc <_sbrk+0x64>)
 80005e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ea:	68fb      	ldr	r3, [r7, #12]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20005000 	.word	0x20005000
 80005f8:	00000400 	.word	0x00000400
 80005fc:	200000a0 	.word	0x200000a0
 8000600:	20000568 	.word	0x20000568

08000604 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function

Reset_Handler:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000612:	490d      	ldr	r1, [pc, #52]	; (8000648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000628:	4c0a      	ldr	r4, [pc, #40]	; (8000654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000636:	f7ff ffe5 	bl	8000604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800063a:	f001 f999 	bl	8001970 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063e:	f7ff fde3 	bl	8000208 <main>
  bx lr
 8000642:	4770      	bx	lr
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000648:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800064c:	08002368 	.word	0x08002368
  ldr r2, =_sbss
 8000650:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000654:	20000568 	.word	0x20000568

08000658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC1_2_IRQHandler>
	...

0800065c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <HAL_Init+0x28>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <HAL_Init+0x28>)
 8000666:	f043 0310 	orr.w	r3, r3, #16
 800066a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800066c:	2003      	movs	r0, #3
 800066e:	f000 f929 	bl	80008c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000672:	2000      	movs	r0, #0
 8000674:	f000 f808 	bl	8000688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000678:	f7ff fe9a 	bl	80003b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40022000 	.word	0x40022000

08000688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_InitTick+0x54>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_InitTick+0x58>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	4619      	mov	r1, r3
 800069a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069e:	fbb3 f3f1 	udiv	r3, r3, r1
 80006a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f933 	bl	8000912 <HAL_SYSTICK_Config>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006b2:	2301      	movs	r3, #1
 80006b4:	e00e      	b.n	80006d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b0f      	cmp	r3, #15
 80006ba:	d80a      	bhi.n	80006d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006bc:	2200      	movs	r2, #0
 80006be:	6879      	ldr	r1, [r7, #4]
 80006c0:	f04f 30ff 	mov.w	r0, #4294967295
 80006c4:	f000 f909 	bl	80008da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c8:	4a06      	ldr	r2, [pc, #24]	; (80006e4 <HAL_InitTick+0x5c>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ce:	2300      	movs	r3, #0
 80006d0:	e000      	b.n	80006d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000000 	.word	0x20000000
 80006e0:	20000008 	.word	0x20000008
 80006e4:	20000004 	.word	0x20000004

080006e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <HAL_IncTick+0x1c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <HAL_IncTick+0x20>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4413      	add	r3, r2
 80006f8:	4a03      	ldr	r2, [pc, #12]	; (8000708 <HAL_IncTick+0x20>)
 80006fa:	6013      	str	r3, [r2, #0]
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	20000008 	.word	0x20000008
 8000708:	200000fc 	.word	0x200000fc

0800070c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return uwTick;
 8000710:	4b02      	ldr	r3, [pc, #8]	; (800071c <HAL_GetTick+0x10>)
 8000712:	681b      	ldr	r3, [r3, #0]
}
 8000714:	4618      	mov	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	200000fc 	.word	0x200000fc

08000720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000728:	f7ff fff0 	bl	800070c <HAL_GetTick>
 800072c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000738:	d005      	beq.n	8000746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <HAL_Delay+0x40>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	461a      	mov	r2, r3
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	4413      	add	r3, r2
 8000744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000746:	bf00      	nop
 8000748:	f7ff ffe0 	bl	800070c <HAL_GetTick>
 800074c:	4602      	mov	r2, r0
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	429a      	cmp	r2, r3
 8000756:	d8f7      	bhi.n	8000748 <HAL_Delay+0x28>
  {
  }
}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000008 	.word	0x20000008

08000764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800078c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000796:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	60d3      	str	r3, [r2, #12]
}
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <__NVIC_GetPriorityGrouping+0x18>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	0a1b      	lsrs	r3, r3, #8
 80007b6:	f003 0307 	and.w	r3, r3, #7
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	db0a      	blt.n	80007f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	490c      	ldr	r1, [pc, #48]	; (8000814 <__NVIC_SetPriority+0x4c>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	0112      	lsls	r2, r2, #4
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	440b      	add	r3, r1
 80007ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f0:	e00a      	b.n	8000808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4908      	ldr	r1, [pc, #32]	; (8000818 <__NVIC_SetPriority+0x50>)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	f003 030f 	and.w	r3, r3, #15
 80007fe:	3b04      	subs	r3, #4
 8000800:	0112      	lsls	r2, r2, #4
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	440b      	add	r3, r1
 8000806:	761a      	strb	r2, [r3, #24]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000e100 	.word	0xe000e100
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800081c:	b480      	push	{r7}
 800081e:	b089      	sub	sp, #36	; 0x24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	f1c3 0307 	rsb	r3, r3, #7
 8000836:	2b04      	cmp	r3, #4
 8000838:	bf28      	it	cs
 800083a:	2304      	movcs	r3, #4
 800083c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3304      	adds	r3, #4
 8000842:	2b06      	cmp	r3, #6
 8000844:	d902      	bls.n	800084c <NVIC_EncodePriority+0x30>
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3b03      	subs	r3, #3
 800084a:	e000      	b.n	800084e <NVIC_EncodePriority+0x32>
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	f04f 32ff 	mov.w	r2, #4294967295
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	43da      	mvns	r2, r3
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	401a      	ands	r2, r3
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000864:	f04f 31ff 	mov.w	r1, #4294967295
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	43d9      	mvns	r1, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	4313      	orrs	r3, r2
         );
}
 8000876:	4618      	mov	r0, r3
 8000878:	3724      	adds	r7, #36	; 0x24
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000890:	d301      	bcc.n	8000896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000892:	2301      	movs	r3, #1
 8000894:	e00f      	b.n	80008b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <SysTick_Config+0x40>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800089e:	210f      	movs	r1, #15
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	f7ff ff90 	bl	80007c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <SysTick_Config+0x40>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ae:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <SysTick_Config+0x40>)
 80008b0:	2207      	movs	r2, #7
 80008b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	e000e010 	.word	0xe000e010

080008c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff49 	bl	8000764 <__NVIC_SetPriorityGrouping>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008da:	b580      	push	{r7, lr}
 80008dc:	b086      	sub	sp, #24
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
 80008e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008ec:	f7ff ff5e 	bl	80007ac <__NVIC_GetPriorityGrouping>
 80008f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	68b9      	ldr	r1, [r7, #8]
 80008f6:	6978      	ldr	r0, [r7, #20]
 80008f8:	f7ff ff90 	bl	800081c <NVIC_EncodePriority>
 80008fc:	4602      	mov	r2, r0
 80008fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000902:	4611      	mov	r1, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff5f 	bl	80007c8 <__NVIC_SetPriority>
}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff ffb0 	bl	8000880 <SysTick_Config>
 8000920:	4603      	mov	r3, r0
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800092c:	b480      	push	{r7}
 800092e:	b08b      	sub	sp, #44	; 0x2c
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800093e:	e127      	b.n	8000b90 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000940:	2201      	movs	r2, #1
 8000942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	4013      	ands	r3, r2
 8000952:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	429a      	cmp	r2, r3
 800095a:	f040 8116 	bne.w	8000b8a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	2b12      	cmp	r3, #18
 8000964:	d034      	beq.n	80009d0 <HAL_GPIO_Init+0xa4>
 8000966:	2b12      	cmp	r3, #18
 8000968:	d80d      	bhi.n	8000986 <HAL_GPIO_Init+0x5a>
 800096a:	2b02      	cmp	r3, #2
 800096c:	d02b      	beq.n	80009c6 <HAL_GPIO_Init+0x9a>
 800096e:	2b02      	cmp	r3, #2
 8000970:	d804      	bhi.n	800097c <HAL_GPIO_Init+0x50>
 8000972:	2b00      	cmp	r3, #0
 8000974:	d031      	beq.n	80009da <HAL_GPIO_Init+0xae>
 8000976:	2b01      	cmp	r3, #1
 8000978:	d01c      	beq.n	80009b4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800097a:	e048      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800097c:	2b03      	cmp	r3, #3
 800097e:	d043      	beq.n	8000a08 <HAL_GPIO_Init+0xdc>
 8000980:	2b11      	cmp	r3, #17
 8000982:	d01b      	beq.n	80009bc <HAL_GPIO_Init+0x90>
          break;
 8000984:	e043      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000986:	4a89      	ldr	r2, [pc, #548]	; (8000bac <HAL_GPIO_Init+0x280>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d026      	beq.n	80009da <HAL_GPIO_Init+0xae>
 800098c:	4a87      	ldr	r2, [pc, #540]	; (8000bac <HAL_GPIO_Init+0x280>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d806      	bhi.n	80009a0 <HAL_GPIO_Init+0x74>
 8000992:	4a87      	ldr	r2, [pc, #540]	; (8000bb0 <HAL_GPIO_Init+0x284>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d020      	beq.n	80009da <HAL_GPIO_Init+0xae>
 8000998:	4a86      	ldr	r2, [pc, #536]	; (8000bb4 <HAL_GPIO_Init+0x288>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d01d      	beq.n	80009da <HAL_GPIO_Init+0xae>
          break;
 800099e:	e036      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009a0:	4a85      	ldr	r2, [pc, #532]	; (8000bb8 <HAL_GPIO_Init+0x28c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d019      	beq.n	80009da <HAL_GPIO_Init+0xae>
 80009a6:	4a85      	ldr	r2, [pc, #532]	; (8000bbc <HAL_GPIO_Init+0x290>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d016      	beq.n	80009da <HAL_GPIO_Init+0xae>
 80009ac:	4a84      	ldr	r2, [pc, #528]	; (8000bc0 <HAL_GPIO_Init+0x294>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d013      	beq.n	80009da <HAL_GPIO_Init+0xae>
          break;
 80009b2:	e02c      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	623b      	str	r3, [r7, #32]
          break;
 80009ba:	e028      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	3304      	adds	r3, #4
 80009c2:	623b      	str	r3, [r7, #32]
          break;
 80009c4:	e023      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	3308      	adds	r3, #8
 80009cc:	623b      	str	r3, [r7, #32]
          break;
 80009ce:	e01e      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	330c      	adds	r3, #12
 80009d6:	623b      	str	r3, [r7, #32]
          break;
 80009d8:	e019      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d102      	bne.n	80009e8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009e2:	2304      	movs	r3, #4
 80009e4:	623b      	str	r3, [r7, #32]
          break;
 80009e6:	e012      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d105      	bne.n	80009fc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009f0:	2308      	movs	r3, #8
 80009f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	69fa      	ldr	r2, [r7, #28]
 80009f8:	611a      	str	r2, [r3, #16]
          break;
 80009fa:	e008      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009fc:	2308      	movs	r3, #8
 80009fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	69fa      	ldr	r2, [r7, #28]
 8000a04:	615a      	str	r2, [r3, #20]
          break;
 8000a06:	e002      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
          break;
 8000a0c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	2bff      	cmp	r3, #255	; 0xff
 8000a12:	d801      	bhi.n	8000a18 <HAL_GPIO_Init+0xec>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	e001      	b.n	8000a1c <HAL_GPIO_Init+0xf0>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	2bff      	cmp	r3, #255	; 0xff
 8000a22:	d802      	bhi.n	8000a2a <HAL_GPIO_Init+0xfe>
 8000a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	e002      	b.n	8000a30 <HAL_GPIO_Init+0x104>
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2c:	3b08      	subs	r3, #8
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	210f      	movs	r1, #15
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	401a      	ands	r2, r3
 8000a42:	6a39      	ldr	r1, [r7, #32]
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	f000 8096 	beq.w	8000b8a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a5e:	4b59      	ldr	r3, [pc, #356]	; (8000bc4 <HAL_GPIO_Init+0x298>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	4a58      	ldr	r2, [pc, #352]	; (8000bc4 <HAL_GPIO_Init+0x298>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6193      	str	r3, [r2, #24]
 8000a6a:	4b56      	ldr	r3, [pc, #344]	; (8000bc4 <HAL_GPIO_Init+0x298>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a76:	4a54      	ldr	r2, [pc, #336]	; (8000bc8 <HAL_GPIO_Init+0x29c>)
 8000a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7a:	089b      	lsrs	r3, r3, #2
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a82:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a86:	f003 0303 	and.w	r3, r3, #3
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	220f      	movs	r2, #15
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	4013      	ands	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a4b      	ldr	r2, [pc, #300]	; (8000bcc <HAL_GPIO_Init+0x2a0>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d013      	beq.n	8000aca <HAL_GPIO_Init+0x19e>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a4a      	ldr	r2, [pc, #296]	; (8000bd0 <HAL_GPIO_Init+0x2a4>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d00d      	beq.n	8000ac6 <HAL_GPIO_Init+0x19a>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a49      	ldr	r2, [pc, #292]	; (8000bd4 <HAL_GPIO_Init+0x2a8>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d007      	beq.n	8000ac2 <HAL_GPIO_Init+0x196>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a48      	ldr	r2, [pc, #288]	; (8000bd8 <HAL_GPIO_Init+0x2ac>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d101      	bne.n	8000abe <HAL_GPIO_Init+0x192>
 8000aba:	2303      	movs	r3, #3
 8000abc:	e006      	b.n	8000acc <HAL_GPIO_Init+0x1a0>
 8000abe:	2304      	movs	r3, #4
 8000ac0:	e004      	b.n	8000acc <HAL_GPIO_Init+0x1a0>
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	e002      	b.n	8000acc <HAL_GPIO_Init+0x1a0>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <HAL_GPIO_Init+0x1a0>
 8000aca:	2300      	movs	r3, #0
 8000acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ace:	f002 0203 	and.w	r2, r2, #3
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	4093      	lsls	r3, r2
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000adc:	493a      	ldr	r1, [pc, #232]	; (8000bc8 <HAL_GPIO_Init+0x29c>)
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	089b      	lsrs	r3, r3, #2
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d006      	beq.n	8000b04 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000af6:	4b39      	ldr	r3, [pc, #228]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4938      	ldr	r1, [pc, #224]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	600b      	str	r3, [r1, #0]
 8000b02:	e006      	b.n	8000b12 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b04:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	4933      	ldr	r1, [pc, #204]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b0e:	4013      	ands	r3, r2
 8000b10:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d006      	beq.n	8000b2c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b1e:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	492e      	ldr	r1, [pc, #184]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	604b      	str	r3, [r1, #4]
 8000b2a:	e006      	b.n	8000b3a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b2c:	4b2b      	ldr	r3, [pc, #172]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b2e:	685a      	ldr	r2, [r3, #4]
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	43db      	mvns	r3, r3
 8000b34:	4929      	ldr	r1, [pc, #164]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b36:	4013      	ands	r3, r2
 8000b38:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d006      	beq.n	8000b54 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b46:	4b25      	ldr	r3, [pc, #148]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b48:	689a      	ldr	r2, [r3, #8]
 8000b4a:	4924      	ldr	r1, [pc, #144]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	608b      	str	r3, [r1, #8]
 8000b52:	e006      	b.n	8000b62 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b54:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b56:	689a      	ldr	r2, [r3, #8]
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	491f      	ldr	r1, [pc, #124]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b5e:	4013      	ands	r3, r2
 8000b60:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d006      	beq.n	8000b7c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b70:	68da      	ldr	r2, [r3, #12]
 8000b72:	491a      	ldr	r1, [pc, #104]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	60cb      	str	r3, [r1, #12]
 8000b7a:	e006      	b.n	8000b8a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b7e:	68da      	ldr	r2, [r3, #12]
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	43db      	mvns	r3, r3
 8000b84:	4915      	ldr	r1, [pc, #84]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b86:	4013      	ands	r3, r2
 8000b88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b96:	fa22 f303 	lsr.w	r3, r2, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f47f aed0 	bne.w	8000940 <HAL_GPIO_Init+0x14>
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	372c      	adds	r7, #44	; 0x2c
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	10210000 	.word	0x10210000
 8000bb0:	10110000 	.word	0x10110000
 8000bb4:	10120000 	.word	0x10120000
 8000bb8:	10310000 	.word	0x10310000
 8000bbc:	10320000 	.word	0x10320000
 8000bc0:	10220000 	.word	0x10220000
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40010000 	.word	0x40010000
 8000bcc:	40010800 	.word	0x40010800
 8000bd0:	40010c00 	.word	0x40010c00
 8000bd4:	40011000 	.word	0x40011000
 8000bd8:	40011400 	.word	0x40011400
 8000bdc:	40010400 	.word	0x40010400

08000be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	807b      	strh	r3, [r7, #2]
 8000bec:	4613      	mov	r3, r2
 8000bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bf0:	787b      	ldrb	r3, [r7, #1]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bf6:	887a      	ldrh	r2, [r7, #2]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bfc:	e003      	b.n	8000c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	041a      	lsls	r2, r3, #16
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	611a      	str	r2, [r3, #16]
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c22:	887a      	ldrh	r2, [r7, #2]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4013      	ands	r3, r2
 8000c28:	041a      	lsls	r2, r3, #16
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	43d9      	mvns	r1, r3
 8000c2e:	887b      	ldrh	r3, [r7, #2]
 8000c30:	400b      	ands	r3, r1
 8000c32:	431a      	orrs	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	611a      	str	r2, [r3, #16]
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
	...

08000c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d101      	bne.n	8000c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e26c      	b.n	8001130 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f000 8087 	beq.w	8000d72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c64:	4b92      	ldr	r3, [pc, #584]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 030c 	and.w	r3, r3, #12
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	d00c      	beq.n	8000c8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c70:	4b8f      	ldr	r3, [pc, #572]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 030c 	and.w	r3, r3, #12
 8000c78:	2b08      	cmp	r3, #8
 8000c7a:	d112      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x5e>
 8000c7c:	4b8c      	ldr	r3, [pc, #560]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c88:	d10b      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c8a:	4b89      	ldr	r3, [pc, #548]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d06c      	beq.n	8000d70 <HAL_RCC_OscConfig+0x12c>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d168      	bne.n	8000d70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e246      	b.n	8001130 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000caa:	d106      	bne.n	8000cba <HAL_RCC_OscConfig+0x76>
 8000cac:	4b80      	ldr	r3, [pc, #512]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a7f      	ldr	r2, [pc, #508]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	e02e      	b.n	8000d18 <HAL_RCC_OscConfig+0xd4>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d10c      	bne.n	8000cdc <HAL_RCC_OscConfig+0x98>
 8000cc2:	4b7b      	ldr	r3, [pc, #492]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a7a      	ldr	r2, [pc, #488]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	4b78      	ldr	r3, [pc, #480]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a77      	ldr	r2, [pc, #476]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	e01d      	b.n	8000d18 <HAL_RCC_OscConfig+0xd4>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ce4:	d10c      	bne.n	8000d00 <HAL_RCC_OscConfig+0xbc>
 8000ce6:	4b72      	ldr	r3, [pc, #456]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a71      	ldr	r2, [pc, #452]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	4b6f      	ldr	r3, [pc, #444]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a6e      	ldr	r2, [pc, #440]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	e00b      	b.n	8000d18 <HAL_RCC_OscConfig+0xd4>
 8000d00:	4b6b      	ldr	r3, [pc, #428]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a6a      	ldr	r2, [pc, #424]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	4b68      	ldr	r3, [pc, #416]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a67      	ldr	r2, [pc, #412]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d013      	beq.n	8000d48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d20:	f7ff fcf4 	bl	800070c <HAL_GetTick>
 8000d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d26:	e008      	b.n	8000d3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d28:	f7ff fcf0 	bl	800070c <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b64      	cmp	r3, #100	; 0x64
 8000d34:	d901      	bls.n	8000d3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d36:	2303      	movs	r3, #3
 8000d38:	e1fa      	b.n	8001130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d3a:	4b5d      	ldr	r3, [pc, #372]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0f0      	beq.n	8000d28 <HAL_RCC_OscConfig+0xe4>
 8000d46:	e014      	b.n	8000d72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d48:	f7ff fce0 	bl	800070c <HAL_GetTick>
 8000d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4e:	e008      	b.n	8000d62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d50:	f7ff fcdc 	bl	800070c <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b64      	cmp	r3, #100	; 0x64
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e1e6      	b.n	8001130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d62:	4b53      	ldr	r3, [pc, #332]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1f0      	bne.n	8000d50 <HAL_RCC_OscConfig+0x10c>
 8000d6e:	e000      	b.n	8000d72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d063      	beq.n	8000e46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d7e:	4b4c      	ldr	r3, [pc, #304]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 030c 	and.w	r3, r3, #12
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d00b      	beq.n	8000da2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d8a:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 030c 	and.w	r3, r3, #12
 8000d92:	2b08      	cmp	r3, #8
 8000d94:	d11c      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x18c>
 8000d96:	4b46      	ldr	r3, [pc, #280]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d116      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000da2:	4b43      	ldr	r3, [pc, #268]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d005      	beq.n	8000dba <HAL_RCC_OscConfig+0x176>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	691b      	ldr	r3, [r3, #16]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d001      	beq.n	8000dba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e1ba      	b.n	8001130 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dba:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	4939      	ldr	r1, [pc, #228]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dce:	e03a      	b.n	8000e46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d020      	beq.n	8000e1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dd8:	4b36      	ldr	r3, [pc, #216]	; (8000eb4 <HAL_RCC_OscConfig+0x270>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dde:	f7ff fc95 	bl	800070c <HAL_GetTick>
 8000de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de4:	e008      	b.n	8000df8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000de6:	f7ff fc91 	bl	800070c <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d901      	bls.n	8000df8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000df4:	2303      	movs	r3, #3
 8000df6:	e19b      	b.n	8001130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df8:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d0f0      	beq.n	8000de6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e04:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	4927      	ldr	r1, [pc, #156]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	4313      	orrs	r3, r2
 8000e16:	600b      	str	r3, [r1, #0]
 8000e18:	e015      	b.n	8000e46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e1a:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <HAL_RCC_OscConfig+0x270>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e20:	f7ff fc74 	bl	800070c <HAL_GetTick>
 8000e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e26:	e008      	b.n	8000e3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e28:	f7ff fc70 	bl	800070c <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e17a      	b.n	8001130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1f0      	bne.n	8000e28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0308 	and.w	r3, r3, #8
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d03a      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d019      	beq.n	8000e8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <HAL_RCC_OscConfig+0x274>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e60:	f7ff fc54 	bl	800070c <HAL_GetTick>
 8000e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e66:	e008      	b.n	8000e7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e68:	f7ff fc50 	bl	800070c <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d901      	bls.n	8000e7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e15a      	b.n	8001130 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d0f0      	beq.n	8000e68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e86:	2001      	movs	r0, #1
 8000e88:	f000 fada 	bl	8001440 <RCC_Delay>
 8000e8c:	e01c      	b.n	8000ec8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_RCC_OscConfig+0x274>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e94:	f7ff fc3a 	bl	800070c <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e9a:	e00f      	b.n	8000ebc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e9c:	f7ff fc36 	bl	800070c <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d908      	bls.n	8000ebc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e140      	b.n	8001130 <HAL_RCC_OscConfig+0x4ec>
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	42420000 	.word	0x42420000
 8000eb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ebc:	4b9e      	ldr	r3, [pc, #632]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1e9      	bne.n	8000e9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f000 80a6 	beq.w	8001022 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eda:	4b97      	ldr	r3, [pc, #604]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10d      	bne.n	8000f02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b94      	ldr	r3, [pc, #592]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	4a93      	ldr	r2, [pc, #588]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	61d3      	str	r3, [r2, #28]
 8000ef2:	4b91      	ldr	r3, [pc, #580]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000efe:	2301      	movs	r3, #1
 8000f00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f02:	4b8e      	ldr	r3, [pc, #568]	; (800113c <HAL_RCC_OscConfig+0x4f8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d118      	bne.n	8000f40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f0e:	4b8b      	ldr	r3, [pc, #556]	; (800113c <HAL_RCC_OscConfig+0x4f8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a8a      	ldr	r2, [pc, #552]	; (800113c <HAL_RCC_OscConfig+0x4f8>)
 8000f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f1a:	f7ff fbf7 	bl	800070c <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f20:	e008      	b.n	8000f34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f22:	f7ff fbf3 	bl	800070c <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b64      	cmp	r3, #100	; 0x64
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e0fd      	b.n	8001130 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f34:	4b81      	ldr	r3, [pc, #516]	; (800113c <HAL_RCC_OscConfig+0x4f8>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0f0      	beq.n	8000f22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d106      	bne.n	8000f56 <HAL_RCC_OscConfig+0x312>
 8000f48:	4b7b      	ldr	r3, [pc, #492]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8000f4a:	6a1b      	ldr	r3, [r3, #32]
 8000f4c:	4a7a      	ldr	r2, [pc, #488]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6213      	str	r3, [r2, #32]
 8000f54:	e02d      	b.n	8000fb2 <HAL_RCC_OscConfig+0x36e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10c      	bne.n	8000f78 <HAL_RCC_OscConfig+0x334>
 8000f5e:	4b76      	ldr	r3, [pc, #472]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	4a75      	ldr	r2, [pc, #468]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8000f64:	f023 0301 	bic.w	r3, r3, #1
 8000f68:	6213      	str	r3, [r2, #32]
 8000f6a:	4b73      	ldr	r3, [pc, #460]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8000f6c:	6a1b      	ldr	r3, [r3, #32]
 8000f6e:	4a72      	ldr	r2, [pc, #456]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8000f70:	f023 0304 	bic.w	r3, r3, #4
 8000f74:	6213      	str	r3, [r2, #32]
 8000f76:	e01c      	b.n	8000fb2 <HAL_RCC_OscConfig+0x36e>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	2b05      	cmp	r3, #5
 8000f7e:	d10c      	bne.n	8000f9a <HAL_RCC_OscConfig+0x356>
 8000f80:	4b6d      	ldr	r3, [pc, #436]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	4a6c      	ldr	r2, [pc, #432]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8000f86:	f043 0304 	orr.w	r3, r3, #4
 8000f8a:	6213      	str	r3, [r2, #32]
 8000f8c:	4b6a      	ldr	r3, [pc, #424]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	4a69      	ldr	r2, [pc, #420]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6213      	str	r3, [r2, #32]
 8000f98:	e00b      	b.n	8000fb2 <HAL_RCC_OscConfig+0x36e>
 8000f9a:	4b67      	ldr	r3, [pc, #412]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	4a66      	ldr	r2, [pc, #408]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8000fa0:	f023 0301 	bic.w	r3, r3, #1
 8000fa4:	6213      	str	r3, [r2, #32]
 8000fa6:	4b64      	ldr	r3, [pc, #400]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8000fa8:	6a1b      	ldr	r3, [r3, #32]
 8000faa:	4a63      	ldr	r2, [pc, #396]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8000fac:	f023 0304 	bic.w	r3, r3, #4
 8000fb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d015      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fba:	f7ff fba7 	bl	800070c <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc0:	e00a      	b.n	8000fd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fc2:	f7ff fba3 	bl	800070c <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e0ab      	b.n	8001130 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd8:	4b57      	ldr	r3, [pc, #348]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0ee      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x37e>
 8000fe4:	e014      	b.n	8001010 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe6:	f7ff fb91 	bl	800070c <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fec:	e00a      	b.n	8001004 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fee:	f7ff fb8d 	bl	800070c <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e095      	b.n	8001130 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001004:	4b4c      	ldr	r3, [pc, #304]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1ee      	bne.n	8000fee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d105      	bne.n	8001022 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001016:	4b48      	ldr	r3, [pc, #288]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a47      	ldr	r2, [pc, #284]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 800101c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001020:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 8081 	beq.w	800112e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800102c:	4b42      	ldr	r3, [pc, #264]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 030c 	and.w	r3, r3, #12
 8001034:	2b08      	cmp	r3, #8
 8001036:	d061      	beq.n	80010fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d146      	bne.n	80010ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001040:	4b3f      	ldr	r3, [pc, #252]	; (8001140 <HAL_RCC_OscConfig+0x4fc>)
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001046:	f7ff fb61 	bl	800070c <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800104e:	f7ff fb5d 	bl	800070c <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e067      	b.n	8001130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001060:	4b35      	ldr	r3, [pc, #212]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1f0      	bne.n	800104e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001074:	d108      	bne.n	8001088 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001076:	4b30      	ldr	r3, [pc, #192]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	492d      	ldr	r1, [pc, #180]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 8001084:	4313      	orrs	r3, r2
 8001086:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001088:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a19      	ldr	r1, [r3, #32]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001098:	430b      	orrs	r3, r1
 800109a:	4927      	ldr	r1, [pc, #156]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 800109c:	4313      	orrs	r3, r2
 800109e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010a0:	4b27      	ldr	r3, [pc, #156]	; (8001140 <HAL_RCC_OscConfig+0x4fc>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a6:	f7ff fb31 	bl	800070c <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ae:	f7ff fb2d 	bl	800070c <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e037      	b.n	8001130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f0      	beq.n	80010ae <HAL_RCC_OscConfig+0x46a>
 80010cc:	e02f      	b.n	800112e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <HAL_RCC_OscConfig+0x4fc>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d4:	f7ff fb1a 	bl	800070c <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010dc:	f7ff fb16 	bl	800070c <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e020      	b.n	8001130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f0      	bne.n	80010dc <HAL_RCC_OscConfig+0x498>
 80010fa:	e018      	b.n	800112e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d101      	bne.n	8001108 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e013      	b.n	8001130 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_RCC_OscConfig+0x4f4>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	429a      	cmp	r2, r3
 800111a:	d106      	bne.n	800112a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001126:	429a      	cmp	r2, r3
 8001128:	d001      	beq.n	800112e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40021000 	.word	0x40021000
 800113c:	40007000 	.word	0x40007000
 8001140:	42420060 	.word	0x42420060

08001144 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e0d0      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001158:	4b6a      	ldr	r3, [pc, #424]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d910      	bls.n	8001188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001166:	4b67      	ldr	r3, [pc, #412]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f023 0207 	bic.w	r2, r3, #7
 800116e:	4965      	ldr	r1, [pc, #404]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	4313      	orrs	r3, r2
 8001174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001176:	4b63      	ldr	r3, [pc, #396]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	429a      	cmp	r2, r3
 8001182:	d001      	beq.n	8001188 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e0b8      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d020      	beq.n	80011d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	2b00      	cmp	r3, #0
 800119e:	d005      	beq.n	80011ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011a0:	4b59      	ldr	r3, [pc, #356]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	4a58      	ldr	r2, [pc, #352]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011b8:	4b53      	ldr	r3, [pc, #332]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4a52      	ldr	r2, [pc, #328]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011c4:	4b50      	ldr	r3, [pc, #320]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	494d      	ldr	r1, [pc, #308]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d040      	beq.n	8001264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d107      	bne.n	80011fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ea:	4b47      	ldr	r3, [pc, #284]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d115      	bne.n	8001222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e07f      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d107      	bne.n	8001212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001202:	4b41      	ldr	r3, [pc, #260]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d109      	bne.n	8001222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e073      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001212:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e06b      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001222:	4b39      	ldr	r3, [pc, #228]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f023 0203 	bic.w	r2, r3, #3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4936      	ldr	r1, [pc, #216]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001230:	4313      	orrs	r3, r2
 8001232:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001234:	f7ff fa6a 	bl	800070c <HAL_GetTick>
 8001238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800123a:	e00a      	b.n	8001252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800123c:	f7ff fa66 	bl	800070c <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	f241 3288 	movw	r2, #5000	; 0x1388
 800124a:	4293      	cmp	r3, r2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e053      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001252:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 020c 	and.w	r2, r3, #12
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	429a      	cmp	r2, r3
 8001262:	d1eb      	bne.n	800123c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d210      	bcs.n	8001294 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001272:	4b24      	ldr	r3, [pc, #144]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 0207 	bic.w	r2, r3, #7
 800127a:	4922      	ldr	r1, [pc, #136]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d001      	beq.n	8001294 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e032      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	d008      	beq.n	80012b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	4916      	ldr	r1, [pc, #88]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d009      	beq.n	80012d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	490e      	ldr	r1, [pc, #56]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012d2:	f000 f821 	bl	8001318 <HAL_RCC_GetSysClockFreq>
 80012d6:	4601      	mov	r1, r0
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	091b      	lsrs	r3, r3, #4
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <HAL_RCC_ClockConfig+0x1c8>)
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
 80012e6:	fa21 f303 	lsr.w	r3, r1, r3
 80012ea:	4a09      	ldr	r2, [pc, #36]	; (8001310 <HAL_RCC_ClockConfig+0x1cc>)
 80012ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_RCC_ClockConfig+0x1d0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f9c8 	bl	8000688 <HAL_InitTick>

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40022000 	.word	0x40022000
 8001308:	40021000 	.word	0x40021000
 800130c:	080022e4 	.word	0x080022e4
 8001310:	20000000 	.word	0x20000000
 8001314:	20000004 	.word	0x20000004

08001318 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001318:	b490      	push	{r4, r7}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800131e:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001320:	1d3c      	adds	r4, r7, #4
 8001322:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001324:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001328:	4b28      	ldr	r3, [pc, #160]	; (80013cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800133e:	2300      	movs	r3, #0
 8001340:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b04      	cmp	r3, #4
 8001350:	d002      	beq.n	8001358 <HAL_RCC_GetSysClockFreq+0x40>
 8001352:	2b08      	cmp	r3, #8
 8001354:	d003      	beq.n	800135e <HAL_RCC_GetSysClockFreq+0x46>
 8001356:	e02d      	b.n	80013b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001358:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800135a:	623b      	str	r3, [r7, #32]
      break;
 800135c:	e02d      	b.n	80013ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	0c9b      	lsrs	r3, r3, #18
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800136a:	4413      	add	r3, r2
 800136c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001370:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	0c5b      	lsrs	r3, r3, #17
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800138a:	4413      	add	r3, r2
 800138c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001390:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001396:	fb02 f203 	mul.w	r2, r2, r3
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
 80013a2:	e004      	b.n	80013ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	4a0c      	ldr	r2, [pc, #48]	; (80013d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80013a8:	fb02 f303 	mul.w	r3, r2, r3
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	623b      	str	r3, [r7, #32]
      break;
 80013b2:	e002      	b.n	80013ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013b6:	623b      	str	r3, [r7, #32]
      break;
 80013b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013ba:	6a3b      	ldr	r3, [r7, #32]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3728      	adds	r7, #40	; 0x28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc90      	pop	{r4, r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	080022d0 	.word	0x080022d0
 80013cc:	080022e0 	.word	0x080022e0
 80013d0:	40021000 	.word	0x40021000
 80013d4:	007a1200 	.word	0x007a1200
 80013d8:	003d0900 	.word	0x003d0900

080013dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013e0:	4b02      	ldr	r3, [pc, #8]	; (80013ec <HAL_RCC_GetHCLKFreq+0x10>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	20000000 	.word	0x20000000

080013f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013f4:	f7ff fff2 	bl	80013dc <HAL_RCC_GetHCLKFreq>
 80013f8:	4601      	mov	r1, r0
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	0a1b      	lsrs	r3, r3, #8
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	4a03      	ldr	r2, [pc, #12]	; (8001414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	fa21 f303 	lsr.w	r3, r1, r3
}
 800140c:	4618      	mov	r0, r3
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40021000 	.word	0x40021000
 8001414:	080022f4 	.word	0x080022f4

08001418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800141c:	f7ff ffde 	bl	80013dc <HAL_RCC_GetHCLKFreq>
 8001420:	4601      	mov	r1, r0
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	0adb      	lsrs	r3, r3, #11
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	4a03      	ldr	r2, [pc, #12]	; (800143c <HAL_RCC_GetPCLK2Freq+0x24>)
 800142e:	5cd3      	ldrb	r3, [r2, r3]
 8001430:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001434:	4618      	mov	r0, r3
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40021000 	.word	0x40021000
 800143c:	080022f4 	.word	0x080022f4

08001440 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <RCC_Delay+0x34>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <RCC_Delay+0x38>)
 800144e:	fba2 2303 	umull	r2, r3, r2, r3
 8001452:	0a5b      	lsrs	r3, r3, #9
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800145c:	bf00      	nop
  }
  while (Delay --);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	1e5a      	subs	r2, r3, #1
 8001462:	60fa      	str	r2, [r7, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f9      	bne.n	800145c <RCC_Delay+0x1c>
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000000 	.word	0x20000000
 8001478:	10624dd3 	.word	0x10624dd3

0800147c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e03f      	b.n	800150e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d106      	bne.n	80014a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7fe ffb6 	bl	8000414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2224      	movs	r2, #36	; 0x24
 80014ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 f905 	bl	80016d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	691a      	ldr	r2, [r3, #16]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80014d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	695a      	ldr	r2, [r3, #20]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80014e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2220      	movs	r2, #32
 8001500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2220      	movs	r2, #32
 8001508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b08a      	sub	sp, #40	; 0x28
 800151a:	af02      	add	r7, sp, #8
 800151c:	60f8      	str	r0, [r7, #12]
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	4613      	mov	r3, r2
 8001524:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b20      	cmp	r3, #32
 8001534:	d17c      	bne.n	8001630 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d002      	beq.n	8001542 <HAL_UART_Transmit+0x2c>
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e075      	b.n	8001632 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800154c:	2b01      	cmp	r3, #1
 800154e:	d101      	bne.n	8001554 <HAL_UART_Transmit+0x3e>
 8001550:	2302      	movs	r3, #2
 8001552:	e06e      	b.n	8001632 <HAL_UART_Transmit+0x11c>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2200      	movs	r2, #0
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2221      	movs	r2, #33	; 0x21
 8001566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800156a:	f7ff f8cf 	bl	800070c <HAL_GetTick>
 800156e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	88fa      	ldrh	r2, [r7, #6]
 8001574:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	88fa      	ldrh	r2, [r7, #6]
 800157a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001584:	d108      	bne.n	8001598 <HAL_UART_Transmit+0x82>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d104      	bne.n	8001598 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	e003      	b.n	80015a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80015a8:	e02a      	b.n	8001600 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2200      	movs	r2, #0
 80015b2:	2180      	movs	r1, #128	; 0x80
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f000 f840 	bl	800163a <UART_WaitOnFlagUntilTimeout>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e036      	b.n	8001632 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10b      	bne.n	80015e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	3302      	adds	r3, #2
 80015de:	61bb      	str	r3, [r7, #24]
 80015e0:	e007      	b.n	80015f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	781a      	ldrb	r2, [r3, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	3301      	adds	r3, #1
 80015f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001604:	b29b      	uxth	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1cf      	bne.n	80015aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2200      	movs	r2, #0
 8001612:	2140      	movs	r1, #64	; 0x40
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f000 f810 	bl	800163a <UART_WaitOnFlagUntilTimeout>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e006      	b.n	8001632 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2220      	movs	r2, #32
 8001628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	e000      	b.n	8001632 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001630:	2302      	movs	r3, #2
  }
}
 8001632:	4618      	mov	r0, r3
 8001634:	3720      	adds	r7, #32
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b084      	sub	sp, #16
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	603b      	str	r3, [r7, #0]
 8001646:	4613      	mov	r3, r2
 8001648:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800164a:	e02c      	b.n	80016a6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001652:	d028      	beq.n	80016a6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d007      	beq.n	800166a <UART_WaitOnFlagUntilTimeout+0x30>
 800165a:	f7ff f857 	bl	800070c <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	429a      	cmp	r2, r3
 8001668:	d21d      	bcs.n	80016a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001678:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	695a      	ldr	r2, [r3, #20]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0201 	bic.w	r2, r2, #1
 8001688:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2220      	movs	r2, #32
 800168e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2220      	movs	r2, #32
 8001696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e00f      	b.n	80016c6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4013      	ands	r3, r2
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	bf0c      	ite	eq
 80016b6:	2301      	moveq	r3, #1
 80016b8:	2300      	movne	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d0c3      	beq.n	800164c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800170a:	f023 030c 	bic.w	r3, r3, #12
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6812      	ldr	r2, [r2, #0]
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	430b      	orrs	r3, r1
 8001716:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699a      	ldr	r2, [r3, #24]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a2c      	ldr	r2, [pc, #176]	; (80017e4 <UART_SetConfig+0x114>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d103      	bne.n	8001740 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001738:	f7ff fe6e 	bl	8001418 <HAL_RCC_GetPCLK2Freq>
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	e002      	b.n	8001746 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001740:	f7ff fe56 	bl	80013f0 <HAL_RCC_GetPCLK1Freq>
 8001744:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	009a      	lsls	r2, r3, #2
 8001750:	441a      	add	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	fbb2 f3f3 	udiv	r3, r2, r3
 800175c:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <UART_SetConfig+0x118>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	0119      	lsls	r1, r3, #4
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	009a      	lsls	r2, r3, #2
 8001770:	441a      	add	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	fbb2 f2f3 	udiv	r2, r2, r3
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <UART_SetConfig+0x118>)
 800177e:	fba3 0302 	umull	r0, r3, r3, r2
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	2064      	movs	r0, #100	; 0x64
 8001786:	fb00 f303 	mul.w	r3, r0, r3
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	3332      	adds	r3, #50	; 0x32
 8001790:	4a15      	ldr	r2, [pc, #84]	; (80017e8 <UART_SetConfig+0x118>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800179c:	4419      	add	r1, r3
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	009a      	lsls	r2, r3, #2
 80017a8:	441a      	add	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <UART_SetConfig+0x118>)
 80017b6:	fba3 0302 	umull	r0, r3, r3, r2
 80017ba:	095b      	lsrs	r3, r3, #5
 80017bc:	2064      	movs	r0, #100	; 0x64
 80017be:	fb00 f303 	mul.w	r3, r0, r3
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	3332      	adds	r3, #50	; 0x32
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <UART_SetConfig+0x118>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	095b      	lsrs	r3, r3, #5
 80017d0:	f003 020f 	and.w	r2, r3, #15
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	440a      	add	r2, r1
 80017da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40013800 	.word	0x40013800
 80017e8:	51eb851f 	.word	0x51eb851f

080017ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80017f0:	4904      	ldr	r1, [pc, #16]	; (8001804 <MX_FATFS_Init+0x18>)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_FATFS_Init+0x1c>)
 80017f4:	f000 f8a6 	bl	8001944 <FATFS_LinkDriver>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <MX_FATFS_Init+0x20>)
 80017fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000100 	.word	0x20000100
 8001808:	2000000c 	.word	0x2000000c
 800180c:	20000104 	.word	0x20000104

08001810 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <USER_initialize+0x20>)
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <USER_initialize+0x20>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	20000009 	.word	0x20000009

08001834 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <USER_status+0x20>)
 8001840:	2201      	movs	r2, #1
 8001842:	701a      	strb	r2, [r3, #0]
    return Stat;
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <USER_status+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	20000009 	.word	0x20000009

08001858 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	4603      	mov	r3, r0
 8001866:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8001868:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	4603      	mov	r3, r0
 8001882:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8001884:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8001886:	4618      	mov	r0, r3
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	603a      	str	r2, [r7, #0]
 800189a:	71fb      	strb	r3, [r7, #7]
 800189c:	460b      	mov	r3, r1
 800189e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
    return res;
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	4613      	mov	r3, r2
 80018bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80018be:	2301      	movs	r3, #1
 80018c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80018c6:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <FATFS_LinkDriverEx+0x90>)
 80018c8:	7a5b      	ldrb	r3, [r3, #9]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d831      	bhi.n	8001934 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80018d0:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <FATFS_LinkDriverEx+0x90>)
 80018d2:	7a5b      	ldrb	r3, [r3, #9]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <FATFS_LinkDriverEx+0x90>)
 80018da:	2100      	movs	r1, #0
 80018dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <FATFS_LinkDriverEx+0x90>)
 80018e0:	7a5b      	ldrb	r3, [r3, #9]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	4a16      	ldr	r2, [pc, #88]	; (8001940 <FATFS_LinkDriverEx+0x90>)
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <FATFS_LinkDriverEx+0x90>)
 80018f0:	7a5b      	ldrb	r3, [r3, #9]
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <FATFS_LinkDriverEx+0x90>)
 80018f8:	4413      	add	r3, r2
 80018fa:	79fa      	ldrb	r2, [r7, #7]
 80018fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <FATFS_LinkDriverEx+0x90>)
 8001900:	7a5b      	ldrb	r3, [r3, #9]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	b2d1      	uxtb	r1, r2
 8001908:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <FATFS_LinkDriverEx+0x90>)
 800190a:	7251      	strb	r1, [r2, #9]
 800190c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800190e:	7dbb      	ldrb	r3, [r7, #22]
 8001910:	3330      	adds	r3, #48	; 0x30
 8001912:	b2da      	uxtb	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	3301      	adds	r3, #1
 800191c:	223a      	movs	r2, #58	; 0x3a
 800191e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	3302      	adds	r3, #2
 8001924:	222f      	movs	r2, #47	; 0x2f
 8001926:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	3303      	adds	r3, #3
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8001934:	7dfb      	ldrb	r3, [r7, #23]
}
 8001936:	4618      	mov	r0, r3
 8001938:	371c      	adds	r7, #28
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	200000a4 	.word	0x200000a4

08001944 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	6839      	ldr	r1, [r7, #0]
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ffac 	bl	80018b0 <FATFS_LinkDriverEx>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <__errno>:
 8001964:	4b01      	ldr	r3, [pc, #4]	; (800196c <__errno+0x8>)
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000020 	.word	0x20000020

08001970 <__libc_init_array>:
 8001970:	b570      	push	{r4, r5, r6, lr}
 8001972:	2500      	movs	r5, #0
 8001974:	4e0c      	ldr	r6, [pc, #48]	; (80019a8 <__libc_init_array+0x38>)
 8001976:	4c0d      	ldr	r4, [pc, #52]	; (80019ac <__libc_init_array+0x3c>)
 8001978:	1ba4      	subs	r4, r4, r6
 800197a:	10a4      	asrs	r4, r4, #2
 800197c:	42a5      	cmp	r5, r4
 800197e:	d109      	bne.n	8001994 <__libc_init_array+0x24>
 8001980:	f000 fc88 	bl	8002294 <_init>
 8001984:	2500      	movs	r5, #0
 8001986:	4e0a      	ldr	r6, [pc, #40]	; (80019b0 <__libc_init_array+0x40>)
 8001988:	4c0a      	ldr	r4, [pc, #40]	; (80019b4 <__libc_init_array+0x44>)
 800198a:	1ba4      	subs	r4, r4, r6
 800198c:	10a4      	asrs	r4, r4, #2
 800198e:	42a5      	cmp	r5, r4
 8001990:	d105      	bne.n	800199e <__libc_init_array+0x2e>
 8001992:	bd70      	pop	{r4, r5, r6, pc}
 8001994:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001998:	4798      	blx	r3
 800199a:	3501      	adds	r5, #1
 800199c:	e7ee      	b.n	800197c <__libc_init_array+0xc>
 800199e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019a2:	4798      	blx	r3
 80019a4:	3501      	adds	r5, #1
 80019a6:	e7f2      	b.n	800198e <__libc_init_array+0x1e>
 80019a8:	08002360 	.word	0x08002360
 80019ac:	08002360 	.word	0x08002360
 80019b0:	08002360 	.word	0x08002360
 80019b4:	08002364 	.word	0x08002364

080019b8 <memset>:
 80019b8:	4603      	mov	r3, r0
 80019ba:	4402      	add	r2, r0
 80019bc:	4293      	cmp	r3, r2
 80019be:	d100      	bne.n	80019c2 <memset+0xa>
 80019c0:	4770      	bx	lr
 80019c2:	f803 1b01 	strb.w	r1, [r3], #1
 80019c6:	e7f9      	b.n	80019bc <memset+0x4>

080019c8 <_puts_r>:
 80019c8:	b570      	push	{r4, r5, r6, lr}
 80019ca:	460e      	mov	r6, r1
 80019cc:	4605      	mov	r5, r0
 80019ce:	b118      	cbz	r0, 80019d8 <_puts_r+0x10>
 80019d0:	6983      	ldr	r3, [r0, #24]
 80019d2:	b90b      	cbnz	r3, 80019d8 <_puts_r+0x10>
 80019d4:	f000 fa0c 	bl	8001df0 <__sinit>
 80019d8:	69ab      	ldr	r3, [r5, #24]
 80019da:	68ac      	ldr	r4, [r5, #8]
 80019dc:	b913      	cbnz	r3, 80019e4 <_puts_r+0x1c>
 80019de:	4628      	mov	r0, r5
 80019e0:	f000 fa06 	bl	8001df0 <__sinit>
 80019e4:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <_puts_r+0xac>)
 80019e6:	429c      	cmp	r4, r3
 80019e8:	d117      	bne.n	8001a1a <_puts_r+0x52>
 80019ea:	686c      	ldr	r4, [r5, #4]
 80019ec:	89a3      	ldrh	r3, [r4, #12]
 80019ee:	071b      	lsls	r3, r3, #28
 80019f0:	d51d      	bpl.n	8001a2e <_puts_r+0x66>
 80019f2:	6923      	ldr	r3, [r4, #16]
 80019f4:	b1db      	cbz	r3, 8001a2e <_puts_r+0x66>
 80019f6:	3e01      	subs	r6, #1
 80019f8:	68a3      	ldr	r3, [r4, #8]
 80019fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80019fe:	3b01      	subs	r3, #1
 8001a00:	60a3      	str	r3, [r4, #8]
 8001a02:	b9e9      	cbnz	r1, 8001a40 <_puts_r+0x78>
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	da2e      	bge.n	8001a66 <_puts_r+0x9e>
 8001a08:	4622      	mov	r2, r4
 8001a0a:	210a      	movs	r1, #10
 8001a0c:	4628      	mov	r0, r5
 8001a0e:	f000 f83f 	bl	8001a90 <__swbuf_r>
 8001a12:	3001      	adds	r0, #1
 8001a14:	d011      	beq.n	8001a3a <_puts_r+0x72>
 8001a16:	200a      	movs	r0, #10
 8001a18:	e011      	b.n	8001a3e <_puts_r+0x76>
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <_puts_r+0xb0>)
 8001a1c:	429c      	cmp	r4, r3
 8001a1e:	d101      	bne.n	8001a24 <_puts_r+0x5c>
 8001a20:	68ac      	ldr	r4, [r5, #8]
 8001a22:	e7e3      	b.n	80019ec <_puts_r+0x24>
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <_puts_r+0xb4>)
 8001a26:	429c      	cmp	r4, r3
 8001a28:	bf08      	it	eq
 8001a2a:	68ec      	ldreq	r4, [r5, #12]
 8001a2c:	e7de      	b.n	80019ec <_puts_r+0x24>
 8001a2e:	4621      	mov	r1, r4
 8001a30:	4628      	mov	r0, r5
 8001a32:	f000 f87f 	bl	8001b34 <__swsetup_r>
 8001a36:	2800      	cmp	r0, #0
 8001a38:	d0dd      	beq.n	80019f6 <_puts_r+0x2e>
 8001a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3e:	bd70      	pop	{r4, r5, r6, pc}
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	da04      	bge.n	8001a4e <_puts_r+0x86>
 8001a44:	69a2      	ldr	r2, [r4, #24]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	dc06      	bgt.n	8001a58 <_puts_r+0x90>
 8001a4a:	290a      	cmp	r1, #10
 8001a4c:	d004      	beq.n	8001a58 <_puts_r+0x90>
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	6022      	str	r2, [r4, #0]
 8001a54:	7019      	strb	r1, [r3, #0]
 8001a56:	e7cf      	b.n	80019f8 <_puts_r+0x30>
 8001a58:	4622      	mov	r2, r4
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	f000 f818 	bl	8001a90 <__swbuf_r>
 8001a60:	3001      	adds	r0, #1
 8001a62:	d1c9      	bne.n	80019f8 <_puts_r+0x30>
 8001a64:	e7e9      	b.n	8001a3a <_puts_r+0x72>
 8001a66:	200a      	movs	r0, #10
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	6022      	str	r2, [r4, #0]
 8001a6e:	7018      	strb	r0, [r3, #0]
 8001a70:	e7e5      	b.n	8001a3e <_puts_r+0x76>
 8001a72:	bf00      	nop
 8001a74:	08002320 	.word	0x08002320
 8001a78:	08002340 	.word	0x08002340
 8001a7c:	08002300 	.word	0x08002300

08001a80 <puts>:
 8001a80:	4b02      	ldr	r3, [pc, #8]	; (8001a8c <puts+0xc>)
 8001a82:	4601      	mov	r1, r0
 8001a84:	6818      	ldr	r0, [r3, #0]
 8001a86:	f7ff bf9f 	b.w	80019c8 <_puts_r>
 8001a8a:	bf00      	nop
 8001a8c:	20000020 	.word	0x20000020

08001a90 <__swbuf_r>:
 8001a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a92:	460e      	mov	r6, r1
 8001a94:	4614      	mov	r4, r2
 8001a96:	4605      	mov	r5, r0
 8001a98:	b118      	cbz	r0, 8001aa2 <__swbuf_r+0x12>
 8001a9a:	6983      	ldr	r3, [r0, #24]
 8001a9c:	b90b      	cbnz	r3, 8001aa2 <__swbuf_r+0x12>
 8001a9e:	f000 f9a7 	bl	8001df0 <__sinit>
 8001aa2:	4b21      	ldr	r3, [pc, #132]	; (8001b28 <__swbuf_r+0x98>)
 8001aa4:	429c      	cmp	r4, r3
 8001aa6:	d12a      	bne.n	8001afe <__swbuf_r+0x6e>
 8001aa8:	686c      	ldr	r4, [r5, #4]
 8001aaa:	69a3      	ldr	r3, [r4, #24]
 8001aac:	60a3      	str	r3, [r4, #8]
 8001aae:	89a3      	ldrh	r3, [r4, #12]
 8001ab0:	071a      	lsls	r2, r3, #28
 8001ab2:	d52e      	bpl.n	8001b12 <__swbuf_r+0x82>
 8001ab4:	6923      	ldr	r3, [r4, #16]
 8001ab6:	b363      	cbz	r3, 8001b12 <__swbuf_r+0x82>
 8001ab8:	6923      	ldr	r3, [r4, #16]
 8001aba:	6820      	ldr	r0, [r4, #0]
 8001abc:	b2f6      	uxtb	r6, r6
 8001abe:	1ac0      	subs	r0, r0, r3
 8001ac0:	6963      	ldr	r3, [r4, #20]
 8001ac2:	4637      	mov	r7, r6
 8001ac4:	4283      	cmp	r3, r0
 8001ac6:	dc04      	bgt.n	8001ad2 <__swbuf_r+0x42>
 8001ac8:	4621      	mov	r1, r4
 8001aca:	4628      	mov	r0, r5
 8001acc:	f000 f926 	bl	8001d1c <_fflush_r>
 8001ad0:	bb28      	cbnz	r0, 8001b1e <__swbuf_r+0x8e>
 8001ad2:	68a3      	ldr	r3, [r4, #8]
 8001ad4:	3001      	adds	r0, #1
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	60a3      	str	r3, [r4, #8]
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	6022      	str	r2, [r4, #0]
 8001ae0:	701e      	strb	r6, [r3, #0]
 8001ae2:	6963      	ldr	r3, [r4, #20]
 8001ae4:	4283      	cmp	r3, r0
 8001ae6:	d004      	beq.n	8001af2 <__swbuf_r+0x62>
 8001ae8:	89a3      	ldrh	r3, [r4, #12]
 8001aea:	07db      	lsls	r3, r3, #31
 8001aec:	d519      	bpl.n	8001b22 <__swbuf_r+0x92>
 8001aee:	2e0a      	cmp	r6, #10
 8001af0:	d117      	bne.n	8001b22 <__swbuf_r+0x92>
 8001af2:	4621      	mov	r1, r4
 8001af4:	4628      	mov	r0, r5
 8001af6:	f000 f911 	bl	8001d1c <_fflush_r>
 8001afa:	b190      	cbz	r0, 8001b22 <__swbuf_r+0x92>
 8001afc:	e00f      	b.n	8001b1e <__swbuf_r+0x8e>
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <__swbuf_r+0x9c>)
 8001b00:	429c      	cmp	r4, r3
 8001b02:	d101      	bne.n	8001b08 <__swbuf_r+0x78>
 8001b04:	68ac      	ldr	r4, [r5, #8]
 8001b06:	e7d0      	b.n	8001aaa <__swbuf_r+0x1a>
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <__swbuf_r+0xa0>)
 8001b0a:	429c      	cmp	r4, r3
 8001b0c:	bf08      	it	eq
 8001b0e:	68ec      	ldreq	r4, [r5, #12]
 8001b10:	e7cb      	b.n	8001aaa <__swbuf_r+0x1a>
 8001b12:	4621      	mov	r1, r4
 8001b14:	4628      	mov	r0, r5
 8001b16:	f000 f80d 	bl	8001b34 <__swsetup_r>
 8001b1a:	2800      	cmp	r0, #0
 8001b1c:	d0cc      	beq.n	8001ab8 <__swbuf_r+0x28>
 8001b1e:	f04f 37ff 	mov.w	r7, #4294967295
 8001b22:	4638      	mov	r0, r7
 8001b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b26:	bf00      	nop
 8001b28:	08002320 	.word	0x08002320
 8001b2c:	08002340 	.word	0x08002340
 8001b30:	08002300 	.word	0x08002300

08001b34 <__swsetup_r>:
 8001b34:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <__swsetup_r+0xcc>)
 8001b36:	b570      	push	{r4, r5, r6, lr}
 8001b38:	681d      	ldr	r5, [r3, #0]
 8001b3a:	4606      	mov	r6, r0
 8001b3c:	460c      	mov	r4, r1
 8001b3e:	b125      	cbz	r5, 8001b4a <__swsetup_r+0x16>
 8001b40:	69ab      	ldr	r3, [r5, #24]
 8001b42:	b913      	cbnz	r3, 8001b4a <__swsetup_r+0x16>
 8001b44:	4628      	mov	r0, r5
 8001b46:	f000 f953 	bl	8001df0 <__sinit>
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <__swsetup_r+0xd0>)
 8001b4c:	429c      	cmp	r4, r3
 8001b4e:	d10f      	bne.n	8001b70 <__swsetup_r+0x3c>
 8001b50:	686c      	ldr	r4, [r5, #4]
 8001b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	0715      	lsls	r5, r2, #28
 8001b5a:	d42c      	bmi.n	8001bb6 <__swsetup_r+0x82>
 8001b5c:	06d0      	lsls	r0, r2, #27
 8001b5e:	d411      	bmi.n	8001b84 <__swsetup_r+0x50>
 8001b60:	2209      	movs	r2, #9
 8001b62:	6032      	str	r2, [r6, #0]
 8001b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b68:	81a3      	strh	r3, [r4, #12]
 8001b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6e:	e03e      	b.n	8001bee <__swsetup_r+0xba>
 8001b70:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <__swsetup_r+0xd4>)
 8001b72:	429c      	cmp	r4, r3
 8001b74:	d101      	bne.n	8001b7a <__swsetup_r+0x46>
 8001b76:	68ac      	ldr	r4, [r5, #8]
 8001b78:	e7eb      	b.n	8001b52 <__swsetup_r+0x1e>
 8001b7a:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <__swsetup_r+0xd8>)
 8001b7c:	429c      	cmp	r4, r3
 8001b7e:	bf08      	it	eq
 8001b80:	68ec      	ldreq	r4, [r5, #12]
 8001b82:	e7e6      	b.n	8001b52 <__swsetup_r+0x1e>
 8001b84:	0751      	lsls	r1, r2, #29
 8001b86:	d512      	bpl.n	8001bae <__swsetup_r+0x7a>
 8001b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b8a:	b141      	cbz	r1, 8001b9e <__swsetup_r+0x6a>
 8001b8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b90:	4299      	cmp	r1, r3
 8001b92:	d002      	beq.n	8001b9a <__swsetup_r+0x66>
 8001b94:	4630      	mov	r0, r6
 8001b96:	f000 fa19 	bl	8001fcc <_free_r>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	6363      	str	r3, [r4, #52]	; 0x34
 8001b9e:	89a3      	ldrh	r3, [r4, #12]
 8001ba0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001ba4:	81a3      	strh	r3, [r4, #12]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	6063      	str	r3, [r4, #4]
 8001baa:	6923      	ldr	r3, [r4, #16]
 8001bac:	6023      	str	r3, [r4, #0]
 8001bae:	89a3      	ldrh	r3, [r4, #12]
 8001bb0:	f043 0308 	orr.w	r3, r3, #8
 8001bb4:	81a3      	strh	r3, [r4, #12]
 8001bb6:	6923      	ldr	r3, [r4, #16]
 8001bb8:	b94b      	cbnz	r3, 8001bce <__swsetup_r+0x9a>
 8001bba:	89a3      	ldrh	r3, [r4, #12]
 8001bbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bc4:	d003      	beq.n	8001bce <__swsetup_r+0x9a>
 8001bc6:	4621      	mov	r1, r4
 8001bc8:	4630      	mov	r0, r6
 8001bca:	f000 f9bf 	bl	8001f4c <__smakebuf_r>
 8001bce:	89a2      	ldrh	r2, [r4, #12]
 8001bd0:	f012 0301 	ands.w	r3, r2, #1
 8001bd4:	d00c      	beq.n	8001bf0 <__swsetup_r+0xbc>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60a3      	str	r3, [r4, #8]
 8001bda:	6963      	ldr	r3, [r4, #20]
 8001bdc:	425b      	negs	r3, r3
 8001bde:	61a3      	str	r3, [r4, #24]
 8001be0:	6923      	ldr	r3, [r4, #16]
 8001be2:	b953      	cbnz	r3, 8001bfa <__swsetup_r+0xc6>
 8001be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001be8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001bec:	d1ba      	bne.n	8001b64 <__swsetup_r+0x30>
 8001bee:	bd70      	pop	{r4, r5, r6, pc}
 8001bf0:	0792      	lsls	r2, r2, #30
 8001bf2:	bf58      	it	pl
 8001bf4:	6963      	ldrpl	r3, [r4, #20]
 8001bf6:	60a3      	str	r3, [r4, #8]
 8001bf8:	e7f2      	b.n	8001be0 <__swsetup_r+0xac>
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	e7f7      	b.n	8001bee <__swsetup_r+0xba>
 8001bfe:	bf00      	nop
 8001c00:	20000020 	.word	0x20000020
 8001c04:	08002320 	.word	0x08002320
 8001c08:	08002340 	.word	0x08002340
 8001c0c:	08002300 	.word	0x08002300

08001c10 <__sflush_r>:
 8001c10:	898a      	ldrh	r2, [r1, #12]
 8001c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c16:	4605      	mov	r5, r0
 8001c18:	0710      	lsls	r0, r2, #28
 8001c1a:	460c      	mov	r4, r1
 8001c1c:	d458      	bmi.n	8001cd0 <__sflush_r+0xc0>
 8001c1e:	684b      	ldr	r3, [r1, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	dc05      	bgt.n	8001c30 <__sflush_r+0x20>
 8001c24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	dc02      	bgt.n	8001c30 <__sflush_r+0x20>
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c32:	2e00      	cmp	r6, #0
 8001c34:	d0f9      	beq.n	8001c2a <__sflush_r+0x1a>
 8001c36:	2300      	movs	r3, #0
 8001c38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c3c:	682f      	ldr	r7, [r5, #0]
 8001c3e:	6a21      	ldr	r1, [r4, #32]
 8001c40:	602b      	str	r3, [r5, #0]
 8001c42:	d032      	beq.n	8001caa <__sflush_r+0x9a>
 8001c44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c46:	89a3      	ldrh	r3, [r4, #12]
 8001c48:	075a      	lsls	r2, r3, #29
 8001c4a:	d505      	bpl.n	8001c58 <__sflush_r+0x48>
 8001c4c:	6863      	ldr	r3, [r4, #4]
 8001c4e:	1ac0      	subs	r0, r0, r3
 8001c50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c52:	b10b      	cbz	r3, 8001c58 <__sflush_r+0x48>
 8001c54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c56:	1ac0      	subs	r0, r0, r3
 8001c58:	2300      	movs	r3, #0
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c5e:	6a21      	ldr	r1, [r4, #32]
 8001c60:	4628      	mov	r0, r5
 8001c62:	47b0      	blx	r6
 8001c64:	1c43      	adds	r3, r0, #1
 8001c66:	89a3      	ldrh	r3, [r4, #12]
 8001c68:	d106      	bne.n	8001c78 <__sflush_r+0x68>
 8001c6a:	6829      	ldr	r1, [r5, #0]
 8001c6c:	291d      	cmp	r1, #29
 8001c6e:	d848      	bhi.n	8001d02 <__sflush_r+0xf2>
 8001c70:	4a29      	ldr	r2, [pc, #164]	; (8001d18 <__sflush_r+0x108>)
 8001c72:	40ca      	lsrs	r2, r1
 8001c74:	07d6      	lsls	r6, r2, #31
 8001c76:	d544      	bpl.n	8001d02 <__sflush_r+0xf2>
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6062      	str	r2, [r4, #4]
 8001c7c:	6922      	ldr	r2, [r4, #16]
 8001c7e:	04d9      	lsls	r1, r3, #19
 8001c80:	6022      	str	r2, [r4, #0]
 8001c82:	d504      	bpl.n	8001c8e <__sflush_r+0x7e>
 8001c84:	1c42      	adds	r2, r0, #1
 8001c86:	d101      	bne.n	8001c8c <__sflush_r+0x7c>
 8001c88:	682b      	ldr	r3, [r5, #0]
 8001c8a:	b903      	cbnz	r3, 8001c8e <__sflush_r+0x7e>
 8001c8c:	6560      	str	r0, [r4, #84]	; 0x54
 8001c8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c90:	602f      	str	r7, [r5, #0]
 8001c92:	2900      	cmp	r1, #0
 8001c94:	d0c9      	beq.n	8001c2a <__sflush_r+0x1a>
 8001c96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c9a:	4299      	cmp	r1, r3
 8001c9c:	d002      	beq.n	8001ca4 <__sflush_r+0x94>
 8001c9e:	4628      	mov	r0, r5
 8001ca0:	f000 f994 	bl	8001fcc <_free_r>
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	6360      	str	r0, [r4, #52]	; 0x34
 8001ca8:	e7c0      	b.n	8001c2c <__sflush_r+0x1c>
 8001caa:	2301      	movs	r3, #1
 8001cac:	4628      	mov	r0, r5
 8001cae:	47b0      	blx	r6
 8001cb0:	1c41      	adds	r1, r0, #1
 8001cb2:	d1c8      	bne.n	8001c46 <__sflush_r+0x36>
 8001cb4:	682b      	ldr	r3, [r5, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0c5      	beq.n	8001c46 <__sflush_r+0x36>
 8001cba:	2b1d      	cmp	r3, #29
 8001cbc:	d001      	beq.n	8001cc2 <__sflush_r+0xb2>
 8001cbe:	2b16      	cmp	r3, #22
 8001cc0:	d101      	bne.n	8001cc6 <__sflush_r+0xb6>
 8001cc2:	602f      	str	r7, [r5, #0]
 8001cc4:	e7b1      	b.n	8001c2a <__sflush_r+0x1a>
 8001cc6:	89a3      	ldrh	r3, [r4, #12]
 8001cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ccc:	81a3      	strh	r3, [r4, #12]
 8001cce:	e7ad      	b.n	8001c2c <__sflush_r+0x1c>
 8001cd0:	690f      	ldr	r7, [r1, #16]
 8001cd2:	2f00      	cmp	r7, #0
 8001cd4:	d0a9      	beq.n	8001c2a <__sflush_r+0x1a>
 8001cd6:	0793      	lsls	r3, r2, #30
 8001cd8:	bf18      	it	ne
 8001cda:	2300      	movne	r3, #0
 8001cdc:	680e      	ldr	r6, [r1, #0]
 8001cde:	bf08      	it	eq
 8001ce0:	694b      	ldreq	r3, [r1, #20]
 8001ce2:	eba6 0807 	sub.w	r8, r6, r7
 8001ce6:	600f      	str	r7, [r1, #0]
 8001ce8:	608b      	str	r3, [r1, #8]
 8001cea:	f1b8 0f00 	cmp.w	r8, #0
 8001cee:	dd9c      	ble.n	8001c2a <__sflush_r+0x1a>
 8001cf0:	4643      	mov	r3, r8
 8001cf2:	463a      	mov	r2, r7
 8001cf4:	6a21      	ldr	r1, [r4, #32]
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001cfa:	47b0      	blx	r6
 8001cfc:	2800      	cmp	r0, #0
 8001cfe:	dc06      	bgt.n	8001d0e <__sflush_r+0xfe>
 8001d00:	89a3      	ldrh	r3, [r4, #12]
 8001d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d06:	81a3      	strh	r3, [r4, #12]
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	e78e      	b.n	8001c2c <__sflush_r+0x1c>
 8001d0e:	4407      	add	r7, r0
 8001d10:	eba8 0800 	sub.w	r8, r8, r0
 8001d14:	e7e9      	b.n	8001cea <__sflush_r+0xda>
 8001d16:	bf00      	nop
 8001d18:	20400001 	.word	0x20400001

08001d1c <_fflush_r>:
 8001d1c:	b538      	push	{r3, r4, r5, lr}
 8001d1e:	690b      	ldr	r3, [r1, #16]
 8001d20:	4605      	mov	r5, r0
 8001d22:	460c      	mov	r4, r1
 8001d24:	b1db      	cbz	r3, 8001d5e <_fflush_r+0x42>
 8001d26:	b118      	cbz	r0, 8001d30 <_fflush_r+0x14>
 8001d28:	6983      	ldr	r3, [r0, #24]
 8001d2a:	b90b      	cbnz	r3, 8001d30 <_fflush_r+0x14>
 8001d2c:	f000 f860 	bl	8001df0 <__sinit>
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <_fflush_r+0x48>)
 8001d32:	429c      	cmp	r4, r3
 8001d34:	d109      	bne.n	8001d4a <_fflush_r+0x2e>
 8001d36:	686c      	ldr	r4, [r5, #4]
 8001d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d3c:	b17b      	cbz	r3, 8001d5e <_fflush_r+0x42>
 8001d3e:	4621      	mov	r1, r4
 8001d40:	4628      	mov	r0, r5
 8001d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d46:	f7ff bf63 	b.w	8001c10 <__sflush_r>
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <_fflush_r+0x4c>)
 8001d4c:	429c      	cmp	r4, r3
 8001d4e:	d101      	bne.n	8001d54 <_fflush_r+0x38>
 8001d50:	68ac      	ldr	r4, [r5, #8]
 8001d52:	e7f1      	b.n	8001d38 <_fflush_r+0x1c>
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <_fflush_r+0x50>)
 8001d56:	429c      	cmp	r4, r3
 8001d58:	bf08      	it	eq
 8001d5a:	68ec      	ldreq	r4, [r5, #12]
 8001d5c:	e7ec      	b.n	8001d38 <_fflush_r+0x1c>
 8001d5e:	2000      	movs	r0, #0
 8001d60:	bd38      	pop	{r3, r4, r5, pc}
 8001d62:	bf00      	nop
 8001d64:	08002320 	.word	0x08002320
 8001d68:	08002340 	.word	0x08002340
 8001d6c:	08002300 	.word	0x08002300

08001d70 <std>:
 8001d70:	2300      	movs	r3, #0
 8001d72:	b510      	push	{r4, lr}
 8001d74:	4604      	mov	r4, r0
 8001d76:	e9c0 3300 	strd	r3, r3, [r0]
 8001d7a:	6083      	str	r3, [r0, #8]
 8001d7c:	8181      	strh	r1, [r0, #12]
 8001d7e:	6643      	str	r3, [r0, #100]	; 0x64
 8001d80:	81c2      	strh	r2, [r0, #14]
 8001d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d86:	6183      	str	r3, [r0, #24]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	305c      	adds	r0, #92	; 0x5c
 8001d8e:	f7ff fe13 	bl	80019b8 <memset>
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <std+0x38>)
 8001d94:	6224      	str	r4, [r4, #32]
 8001d96:	6263      	str	r3, [r4, #36]	; 0x24
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <std+0x3c>)
 8001d9a:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <std+0x40>)
 8001d9e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001da0:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <std+0x44>)
 8001da2:	6323      	str	r3, [r4, #48]	; 0x30
 8001da4:	bd10      	pop	{r4, pc}
 8001da6:	bf00      	nop
 8001da8:	08002139 	.word	0x08002139
 8001dac:	0800215b 	.word	0x0800215b
 8001db0:	08002193 	.word	0x08002193
 8001db4:	080021b7 	.word	0x080021b7

08001db8 <_cleanup_r>:
 8001db8:	4901      	ldr	r1, [pc, #4]	; (8001dc0 <_cleanup_r+0x8>)
 8001dba:	f000 b885 	b.w	8001ec8 <_fwalk_reent>
 8001dbe:	bf00      	nop
 8001dc0:	08001d1d 	.word	0x08001d1d

08001dc4 <__sfmoreglue>:
 8001dc4:	b570      	push	{r4, r5, r6, lr}
 8001dc6:	2568      	movs	r5, #104	; 0x68
 8001dc8:	1e4a      	subs	r2, r1, #1
 8001dca:	4355      	muls	r5, r2
 8001dcc:	460e      	mov	r6, r1
 8001dce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001dd2:	f000 f947 	bl	8002064 <_malloc_r>
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	b140      	cbz	r0, 8001dec <__sfmoreglue+0x28>
 8001dda:	2100      	movs	r1, #0
 8001ddc:	e9c0 1600 	strd	r1, r6, [r0]
 8001de0:	300c      	adds	r0, #12
 8001de2:	60a0      	str	r0, [r4, #8]
 8001de4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001de8:	f7ff fde6 	bl	80019b8 <memset>
 8001dec:	4620      	mov	r0, r4
 8001dee:	bd70      	pop	{r4, r5, r6, pc}

08001df0 <__sinit>:
 8001df0:	6983      	ldr	r3, [r0, #24]
 8001df2:	b510      	push	{r4, lr}
 8001df4:	4604      	mov	r4, r0
 8001df6:	bb33      	cbnz	r3, 8001e46 <__sinit+0x56>
 8001df8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001dfc:	6503      	str	r3, [r0, #80]	; 0x50
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <__sinit+0x58>)
 8001e00:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <__sinit+0x5c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6282      	str	r2, [r0, #40]	; 0x28
 8001e06:	4298      	cmp	r0, r3
 8001e08:	bf04      	itt	eq
 8001e0a:	2301      	moveq	r3, #1
 8001e0c:	6183      	streq	r3, [r0, #24]
 8001e0e:	f000 f81f 	bl	8001e50 <__sfp>
 8001e12:	6060      	str	r0, [r4, #4]
 8001e14:	4620      	mov	r0, r4
 8001e16:	f000 f81b 	bl	8001e50 <__sfp>
 8001e1a:	60a0      	str	r0, [r4, #8]
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f000 f817 	bl	8001e50 <__sfp>
 8001e22:	2200      	movs	r2, #0
 8001e24:	60e0      	str	r0, [r4, #12]
 8001e26:	2104      	movs	r1, #4
 8001e28:	6860      	ldr	r0, [r4, #4]
 8001e2a:	f7ff ffa1 	bl	8001d70 <std>
 8001e2e:	2201      	movs	r2, #1
 8001e30:	2109      	movs	r1, #9
 8001e32:	68a0      	ldr	r0, [r4, #8]
 8001e34:	f7ff ff9c 	bl	8001d70 <std>
 8001e38:	2202      	movs	r2, #2
 8001e3a:	2112      	movs	r1, #18
 8001e3c:	68e0      	ldr	r0, [r4, #12]
 8001e3e:	f7ff ff97 	bl	8001d70 <std>
 8001e42:	2301      	movs	r3, #1
 8001e44:	61a3      	str	r3, [r4, #24]
 8001e46:	bd10      	pop	{r4, pc}
 8001e48:	080022fc 	.word	0x080022fc
 8001e4c:	08001db9 	.word	0x08001db9

08001e50 <__sfp>:
 8001e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e52:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <__sfp+0x70>)
 8001e54:	4607      	mov	r7, r0
 8001e56:	681e      	ldr	r6, [r3, #0]
 8001e58:	69b3      	ldr	r3, [r6, #24]
 8001e5a:	b913      	cbnz	r3, 8001e62 <__sfp+0x12>
 8001e5c:	4630      	mov	r0, r6
 8001e5e:	f7ff ffc7 	bl	8001df0 <__sinit>
 8001e62:	3648      	adds	r6, #72	; 0x48
 8001e64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	d503      	bpl.n	8001e74 <__sfp+0x24>
 8001e6c:	6833      	ldr	r3, [r6, #0]
 8001e6e:	b133      	cbz	r3, 8001e7e <__sfp+0x2e>
 8001e70:	6836      	ldr	r6, [r6, #0]
 8001e72:	e7f7      	b.n	8001e64 <__sfp+0x14>
 8001e74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001e78:	b16d      	cbz	r5, 8001e96 <__sfp+0x46>
 8001e7a:	3468      	adds	r4, #104	; 0x68
 8001e7c:	e7f4      	b.n	8001e68 <__sfp+0x18>
 8001e7e:	2104      	movs	r1, #4
 8001e80:	4638      	mov	r0, r7
 8001e82:	f7ff ff9f 	bl	8001dc4 <__sfmoreglue>
 8001e86:	6030      	str	r0, [r6, #0]
 8001e88:	2800      	cmp	r0, #0
 8001e8a:	d1f1      	bne.n	8001e70 <__sfp+0x20>
 8001e8c:	230c      	movs	r3, #12
 8001e8e:	4604      	mov	r4, r0
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	4620      	mov	r0, r4
 8001e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <__sfp+0x74>)
 8001e98:	6665      	str	r5, [r4, #100]	; 0x64
 8001e9a:	e9c4 5500 	strd	r5, r5, [r4]
 8001e9e:	60a5      	str	r5, [r4, #8]
 8001ea0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001ea4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	4629      	mov	r1, r5
 8001eac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001eb0:	f7ff fd82 	bl	80019b8 <memset>
 8001eb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001eb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001ebc:	e7e9      	b.n	8001e92 <__sfp+0x42>
 8001ebe:	bf00      	nop
 8001ec0:	080022fc 	.word	0x080022fc
 8001ec4:	ffff0001 	.word	0xffff0001

08001ec8 <_fwalk_reent>:
 8001ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ecc:	4680      	mov	r8, r0
 8001ece:	4689      	mov	r9, r1
 8001ed0:	2600      	movs	r6, #0
 8001ed2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001ed6:	b914      	cbnz	r4, 8001ede <_fwalk_reent+0x16>
 8001ed8:	4630      	mov	r0, r6
 8001eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ede:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001ee2:	3f01      	subs	r7, #1
 8001ee4:	d501      	bpl.n	8001eea <_fwalk_reent+0x22>
 8001ee6:	6824      	ldr	r4, [r4, #0]
 8001ee8:	e7f5      	b.n	8001ed6 <_fwalk_reent+0xe>
 8001eea:	89ab      	ldrh	r3, [r5, #12]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d907      	bls.n	8001f00 <_fwalk_reent+0x38>
 8001ef0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	d003      	beq.n	8001f00 <_fwalk_reent+0x38>
 8001ef8:	4629      	mov	r1, r5
 8001efa:	4640      	mov	r0, r8
 8001efc:	47c8      	blx	r9
 8001efe:	4306      	orrs	r6, r0
 8001f00:	3568      	adds	r5, #104	; 0x68
 8001f02:	e7ee      	b.n	8001ee2 <_fwalk_reent+0x1a>

08001f04 <__swhatbuf_r>:
 8001f04:	b570      	push	{r4, r5, r6, lr}
 8001f06:	460e      	mov	r6, r1
 8001f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f0c:	b096      	sub	sp, #88	; 0x58
 8001f0e:	2900      	cmp	r1, #0
 8001f10:	4614      	mov	r4, r2
 8001f12:	461d      	mov	r5, r3
 8001f14:	da07      	bge.n	8001f26 <__swhatbuf_r+0x22>
 8001f16:	2300      	movs	r3, #0
 8001f18:	602b      	str	r3, [r5, #0]
 8001f1a:	89b3      	ldrh	r3, [r6, #12]
 8001f1c:	061a      	lsls	r2, r3, #24
 8001f1e:	d410      	bmi.n	8001f42 <__swhatbuf_r+0x3e>
 8001f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f24:	e00e      	b.n	8001f44 <__swhatbuf_r+0x40>
 8001f26:	466a      	mov	r2, sp
 8001f28:	f000 f96c 	bl	8002204 <_fstat_r>
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	dbf2      	blt.n	8001f16 <__swhatbuf_r+0x12>
 8001f30:	9a01      	ldr	r2, [sp, #4]
 8001f32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001f36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001f3a:	425a      	negs	r2, r3
 8001f3c:	415a      	adcs	r2, r3
 8001f3e:	602a      	str	r2, [r5, #0]
 8001f40:	e7ee      	b.n	8001f20 <__swhatbuf_r+0x1c>
 8001f42:	2340      	movs	r3, #64	; 0x40
 8001f44:	2000      	movs	r0, #0
 8001f46:	6023      	str	r3, [r4, #0]
 8001f48:	b016      	add	sp, #88	; 0x58
 8001f4a:	bd70      	pop	{r4, r5, r6, pc}

08001f4c <__smakebuf_r>:
 8001f4c:	898b      	ldrh	r3, [r1, #12]
 8001f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f50:	079d      	lsls	r5, r3, #30
 8001f52:	4606      	mov	r6, r0
 8001f54:	460c      	mov	r4, r1
 8001f56:	d507      	bpl.n	8001f68 <__smakebuf_r+0x1c>
 8001f58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001f5c:	6023      	str	r3, [r4, #0]
 8001f5e:	6123      	str	r3, [r4, #16]
 8001f60:	2301      	movs	r3, #1
 8001f62:	6163      	str	r3, [r4, #20]
 8001f64:	b002      	add	sp, #8
 8001f66:	bd70      	pop	{r4, r5, r6, pc}
 8001f68:	ab01      	add	r3, sp, #4
 8001f6a:	466a      	mov	r2, sp
 8001f6c:	f7ff ffca 	bl	8001f04 <__swhatbuf_r>
 8001f70:	9900      	ldr	r1, [sp, #0]
 8001f72:	4605      	mov	r5, r0
 8001f74:	4630      	mov	r0, r6
 8001f76:	f000 f875 	bl	8002064 <_malloc_r>
 8001f7a:	b948      	cbnz	r0, 8001f90 <__smakebuf_r+0x44>
 8001f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f80:	059a      	lsls	r2, r3, #22
 8001f82:	d4ef      	bmi.n	8001f64 <__smakebuf_r+0x18>
 8001f84:	f023 0303 	bic.w	r3, r3, #3
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	81a3      	strh	r3, [r4, #12]
 8001f8e:	e7e3      	b.n	8001f58 <__smakebuf_r+0xc>
 8001f90:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <__smakebuf_r+0x7c>)
 8001f92:	62b3      	str	r3, [r6, #40]	; 0x28
 8001f94:	89a3      	ldrh	r3, [r4, #12]
 8001f96:	6020      	str	r0, [r4, #0]
 8001f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f9c:	81a3      	strh	r3, [r4, #12]
 8001f9e:	9b00      	ldr	r3, [sp, #0]
 8001fa0:	6120      	str	r0, [r4, #16]
 8001fa2:	6163      	str	r3, [r4, #20]
 8001fa4:	9b01      	ldr	r3, [sp, #4]
 8001fa6:	b15b      	cbz	r3, 8001fc0 <__smakebuf_r+0x74>
 8001fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fac:	4630      	mov	r0, r6
 8001fae:	f000 f93b 	bl	8002228 <_isatty_r>
 8001fb2:	b128      	cbz	r0, 8001fc0 <__smakebuf_r+0x74>
 8001fb4:	89a3      	ldrh	r3, [r4, #12]
 8001fb6:	f023 0303 	bic.w	r3, r3, #3
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	81a3      	strh	r3, [r4, #12]
 8001fc0:	89a3      	ldrh	r3, [r4, #12]
 8001fc2:	431d      	orrs	r5, r3
 8001fc4:	81a5      	strh	r5, [r4, #12]
 8001fc6:	e7cd      	b.n	8001f64 <__smakebuf_r+0x18>
 8001fc8:	08001db9 	.word	0x08001db9

08001fcc <_free_r>:
 8001fcc:	b538      	push	{r3, r4, r5, lr}
 8001fce:	4605      	mov	r5, r0
 8001fd0:	2900      	cmp	r1, #0
 8001fd2:	d043      	beq.n	800205c <_free_r+0x90>
 8001fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fd8:	1f0c      	subs	r4, r1, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	bfb8      	it	lt
 8001fde:	18e4      	addlt	r4, r4, r3
 8001fe0:	f000 f944 	bl	800226c <__malloc_lock>
 8001fe4:	4a1e      	ldr	r2, [pc, #120]	; (8002060 <_free_r+0x94>)
 8001fe6:	6813      	ldr	r3, [r2, #0]
 8001fe8:	4610      	mov	r0, r2
 8001fea:	b933      	cbnz	r3, 8001ffa <_free_r+0x2e>
 8001fec:	6063      	str	r3, [r4, #4]
 8001fee:	6014      	str	r4, [r2, #0]
 8001ff0:	4628      	mov	r0, r5
 8001ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ff6:	f000 b93a 	b.w	800226e <__malloc_unlock>
 8001ffa:	42a3      	cmp	r3, r4
 8001ffc:	d90b      	bls.n	8002016 <_free_r+0x4a>
 8001ffe:	6821      	ldr	r1, [r4, #0]
 8002000:	1862      	adds	r2, r4, r1
 8002002:	4293      	cmp	r3, r2
 8002004:	bf01      	itttt	eq
 8002006:	681a      	ldreq	r2, [r3, #0]
 8002008:	685b      	ldreq	r3, [r3, #4]
 800200a:	1852      	addeq	r2, r2, r1
 800200c:	6022      	streq	r2, [r4, #0]
 800200e:	6063      	str	r3, [r4, #4]
 8002010:	6004      	str	r4, [r0, #0]
 8002012:	e7ed      	b.n	8001ff0 <_free_r+0x24>
 8002014:	4613      	mov	r3, r2
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	b10a      	cbz	r2, 800201e <_free_r+0x52>
 800201a:	42a2      	cmp	r2, r4
 800201c:	d9fa      	bls.n	8002014 <_free_r+0x48>
 800201e:	6819      	ldr	r1, [r3, #0]
 8002020:	1858      	adds	r0, r3, r1
 8002022:	42a0      	cmp	r0, r4
 8002024:	d10b      	bne.n	800203e <_free_r+0x72>
 8002026:	6820      	ldr	r0, [r4, #0]
 8002028:	4401      	add	r1, r0
 800202a:	1858      	adds	r0, r3, r1
 800202c:	4282      	cmp	r2, r0
 800202e:	6019      	str	r1, [r3, #0]
 8002030:	d1de      	bne.n	8001ff0 <_free_r+0x24>
 8002032:	6810      	ldr	r0, [r2, #0]
 8002034:	6852      	ldr	r2, [r2, #4]
 8002036:	4401      	add	r1, r0
 8002038:	6019      	str	r1, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	e7d8      	b.n	8001ff0 <_free_r+0x24>
 800203e:	d902      	bls.n	8002046 <_free_r+0x7a>
 8002040:	230c      	movs	r3, #12
 8002042:	602b      	str	r3, [r5, #0]
 8002044:	e7d4      	b.n	8001ff0 <_free_r+0x24>
 8002046:	6820      	ldr	r0, [r4, #0]
 8002048:	1821      	adds	r1, r4, r0
 800204a:	428a      	cmp	r2, r1
 800204c:	bf01      	itttt	eq
 800204e:	6811      	ldreq	r1, [r2, #0]
 8002050:	6852      	ldreq	r2, [r2, #4]
 8002052:	1809      	addeq	r1, r1, r0
 8002054:	6021      	streq	r1, [r4, #0]
 8002056:	6062      	str	r2, [r4, #4]
 8002058:	605c      	str	r4, [r3, #4]
 800205a:	e7c9      	b.n	8001ff0 <_free_r+0x24>
 800205c:	bd38      	pop	{r3, r4, r5, pc}
 800205e:	bf00      	nop
 8002060:	200000b0 	.word	0x200000b0

08002064 <_malloc_r>:
 8002064:	b570      	push	{r4, r5, r6, lr}
 8002066:	1ccd      	adds	r5, r1, #3
 8002068:	f025 0503 	bic.w	r5, r5, #3
 800206c:	3508      	adds	r5, #8
 800206e:	2d0c      	cmp	r5, #12
 8002070:	bf38      	it	cc
 8002072:	250c      	movcc	r5, #12
 8002074:	2d00      	cmp	r5, #0
 8002076:	4606      	mov	r6, r0
 8002078:	db01      	blt.n	800207e <_malloc_r+0x1a>
 800207a:	42a9      	cmp	r1, r5
 800207c:	d903      	bls.n	8002086 <_malloc_r+0x22>
 800207e:	230c      	movs	r3, #12
 8002080:	6033      	str	r3, [r6, #0]
 8002082:	2000      	movs	r0, #0
 8002084:	bd70      	pop	{r4, r5, r6, pc}
 8002086:	f000 f8f1 	bl	800226c <__malloc_lock>
 800208a:	4a21      	ldr	r2, [pc, #132]	; (8002110 <_malloc_r+0xac>)
 800208c:	6814      	ldr	r4, [r2, #0]
 800208e:	4621      	mov	r1, r4
 8002090:	b991      	cbnz	r1, 80020b8 <_malloc_r+0x54>
 8002092:	4c20      	ldr	r4, [pc, #128]	; (8002114 <_malloc_r+0xb0>)
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	b91b      	cbnz	r3, 80020a0 <_malloc_r+0x3c>
 8002098:	4630      	mov	r0, r6
 800209a:	f000 f83d 	bl	8002118 <_sbrk_r>
 800209e:	6020      	str	r0, [r4, #0]
 80020a0:	4629      	mov	r1, r5
 80020a2:	4630      	mov	r0, r6
 80020a4:	f000 f838 	bl	8002118 <_sbrk_r>
 80020a8:	1c43      	adds	r3, r0, #1
 80020aa:	d124      	bne.n	80020f6 <_malloc_r+0x92>
 80020ac:	230c      	movs	r3, #12
 80020ae:	4630      	mov	r0, r6
 80020b0:	6033      	str	r3, [r6, #0]
 80020b2:	f000 f8dc 	bl	800226e <__malloc_unlock>
 80020b6:	e7e4      	b.n	8002082 <_malloc_r+0x1e>
 80020b8:	680b      	ldr	r3, [r1, #0]
 80020ba:	1b5b      	subs	r3, r3, r5
 80020bc:	d418      	bmi.n	80020f0 <_malloc_r+0x8c>
 80020be:	2b0b      	cmp	r3, #11
 80020c0:	d90f      	bls.n	80020e2 <_malloc_r+0x7e>
 80020c2:	600b      	str	r3, [r1, #0]
 80020c4:	18cc      	adds	r4, r1, r3
 80020c6:	50cd      	str	r5, [r1, r3]
 80020c8:	4630      	mov	r0, r6
 80020ca:	f000 f8d0 	bl	800226e <__malloc_unlock>
 80020ce:	f104 000b 	add.w	r0, r4, #11
 80020d2:	1d23      	adds	r3, r4, #4
 80020d4:	f020 0007 	bic.w	r0, r0, #7
 80020d8:	1ac3      	subs	r3, r0, r3
 80020da:	d0d3      	beq.n	8002084 <_malloc_r+0x20>
 80020dc:	425a      	negs	r2, r3
 80020de:	50e2      	str	r2, [r4, r3]
 80020e0:	e7d0      	b.n	8002084 <_malloc_r+0x20>
 80020e2:	684b      	ldr	r3, [r1, #4]
 80020e4:	428c      	cmp	r4, r1
 80020e6:	bf16      	itet	ne
 80020e8:	6063      	strne	r3, [r4, #4]
 80020ea:	6013      	streq	r3, [r2, #0]
 80020ec:	460c      	movne	r4, r1
 80020ee:	e7eb      	b.n	80020c8 <_malloc_r+0x64>
 80020f0:	460c      	mov	r4, r1
 80020f2:	6849      	ldr	r1, [r1, #4]
 80020f4:	e7cc      	b.n	8002090 <_malloc_r+0x2c>
 80020f6:	1cc4      	adds	r4, r0, #3
 80020f8:	f024 0403 	bic.w	r4, r4, #3
 80020fc:	42a0      	cmp	r0, r4
 80020fe:	d005      	beq.n	800210c <_malloc_r+0xa8>
 8002100:	1a21      	subs	r1, r4, r0
 8002102:	4630      	mov	r0, r6
 8002104:	f000 f808 	bl	8002118 <_sbrk_r>
 8002108:	3001      	adds	r0, #1
 800210a:	d0cf      	beq.n	80020ac <_malloc_r+0x48>
 800210c:	6025      	str	r5, [r4, #0]
 800210e:	e7db      	b.n	80020c8 <_malloc_r+0x64>
 8002110:	200000b0 	.word	0x200000b0
 8002114:	200000b4 	.word	0x200000b4

08002118 <_sbrk_r>:
 8002118:	b538      	push	{r3, r4, r5, lr}
 800211a:	2300      	movs	r3, #0
 800211c:	4c05      	ldr	r4, [pc, #20]	; (8002134 <_sbrk_r+0x1c>)
 800211e:	4605      	mov	r5, r0
 8002120:	4608      	mov	r0, r1
 8002122:	6023      	str	r3, [r4, #0]
 8002124:	f7fe fa38 	bl	8000598 <_sbrk>
 8002128:	1c43      	adds	r3, r0, #1
 800212a:	d102      	bne.n	8002132 <_sbrk_r+0x1a>
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	b103      	cbz	r3, 8002132 <_sbrk_r+0x1a>
 8002130:	602b      	str	r3, [r5, #0]
 8002132:	bd38      	pop	{r3, r4, r5, pc}
 8002134:	20000564 	.word	0x20000564

08002138 <__sread>:
 8002138:	b510      	push	{r4, lr}
 800213a:	460c      	mov	r4, r1
 800213c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002140:	f000 f896 	bl	8002270 <_read_r>
 8002144:	2800      	cmp	r0, #0
 8002146:	bfab      	itete	ge
 8002148:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800214a:	89a3      	ldrhlt	r3, [r4, #12]
 800214c:	181b      	addge	r3, r3, r0
 800214e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002152:	bfac      	ite	ge
 8002154:	6563      	strge	r3, [r4, #84]	; 0x54
 8002156:	81a3      	strhlt	r3, [r4, #12]
 8002158:	bd10      	pop	{r4, pc}

0800215a <__swrite>:
 800215a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800215e:	461f      	mov	r7, r3
 8002160:	898b      	ldrh	r3, [r1, #12]
 8002162:	4605      	mov	r5, r0
 8002164:	05db      	lsls	r3, r3, #23
 8002166:	460c      	mov	r4, r1
 8002168:	4616      	mov	r6, r2
 800216a:	d505      	bpl.n	8002178 <__swrite+0x1e>
 800216c:	2302      	movs	r3, #2
 800216e:	2200      	movs	r2, #0
 8002170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002174:	f000 f868 	bl	8002248 <_lseek_r>
 8002178:	89a3      	ldrh	r3, [r4, #12]
 800217a:	4632      	mov	r2, r6
 800217c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002180:	81a3      	strh	r3, [r4, #12]
 8002182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002186:	463b      	mov	r3, r7
 8002188:	4628      	mov	r0, r5
 800218a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800218e:	f000 b817 	b.w	80021c0 <_write_r>

08002192 <__sseek>:
 8002192:	b510      	push	{r4, lr}
 8002194:	460c      	mov	r4, r1
 8002196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800219a:	f000 f855 	bl	8002248 <_lseek_r>
 800219e:	1c43      	adds	r3, r0, #1
 80021a0:	89a3      	ldrh	r3, [r4, #12]
 80021a2:	bf15      	itete	ne
 80021a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80021a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80021aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80021ae:	81a3      	strheq	r3, [r4, #12]
 80021b0:	bf18      	it	ne
 80021b2:	81a3      	strhne	r3, [r4, #12]
 80021b4:	bd10      	pop	{r4, pc}

080021b6 <__sclose>:
 80021b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021ba:	f000 b813 	b.w	80021e4 <_close_r>
	...

080021c0 <_write_r>:
 80021c0:	b538      	push	{r3, r4, r5, lr}
 80021c2:	4605      	mov	r5, r0
 80021c4:	4608      	mov	r0, r1
 80021c6:	4611      	mov	r1, r2
 80021c8:	2200      	movs	r2, #0
 80021ca:	4c05      	ldr	r4, [pc, #20]	; (80021e0 <_write_r+0x20>)
 80021cc:	6022      	str	r2, [r4, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	f7fd ffbc 	bl	800014c <_write>
 80021d4:	1c43      	adds	r3, r0, #1
 80021d6:	d102      	bne.n	80021de <_write_r+0x1e>
 80021d8:	6823      	ldr	r3, [r4, #0]
 80021da:	b103      	cbz	r3, 80021de <_write_r+0x1e>
 80021dc:	602b      	str	r3, [r5, #0]
 80021de:	bd38      	pop	{r3, r4, r5, pc}
 80021e0:	20000564 	.word	0x20000564

080021e4 <_close_r>:
 80021e4:	b538      	push	{r3, r4, r5, lr}
 80021e6:	2300      	movs	r3, #0
 80021e8:	4c05      	ldr	r4, [pc, #20]	; (8002200 <_close_r+0x1c>)
 80021ea:	4605      	mov	r5, r0
 80021ec:	4608      	mov	r0, r1
 80021ee:	6023      	str	r3, [r4, #0]
 80021f0:	f7fe f9a1 	bl	8000536 <_close>
 80021f4:	1c43      	adds	r3, r0, #1
 80021f6:	d102      	bne.n	80021fe <_close_r+0x1a>
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	b103      	cbz	r3, 80021fe <_close_r+0x1a>
 80021fc:	602b      	str	r3, [r5, #0]
 80021fe:	bd38      	pop	{r3, r4, r5, pc}
 8002200:	20000564 	.word	0x20000564

08002204 <_fstat_r>:
 8002204:	b538      	push	{r3, r4, r5, lr}
 8002206:	2300      	movs	r3, #0
 8002208:	4c06      	ldr	r4, [pc, #24]	; (8002224 <_fstat_r+0x20>)
 800220a:	4605      	mov	r5, r0
 800220c:	4608      	mov	r0, r1
 800220e:	4611      	mov	r1, r2
 8002210:	6023      	str	r3, [r4, #0]
 8002212:	f7fe f99b 	bl	800054c <_fstat>
 8002216:	1c43      	adds	r3, r0, #1
 8002218:	d102      	bne.n	8002220 <_fstat_r+0x1c>
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	b103      	cbz	r3, 8002220 <_fstat_r+0x1c>
 800221e:	602b      	str	r3, [r5, #0]
 8002220:	bd38      	pop	{r3, r4, r5, pc}
 8002222:	bf00      	nop
 8002224:	20000564 	.word	0x20000564

08002228 <_isatty_r>:
 8002228:	b538      	push	{r3, r4, r5, lr}
 800222a:	2300      	movs	r3, #0
 800222c:	4c05      	ldr	r4, [pc, #20]	; (8002244 <_isatty_r+0x1c>)
 800222e:	4605      	mov	r5, r0
 8002230:	4608      	mov	r0, r1
 8002232:	6023      	str	r3, [r4, #0]
 8002234:	f7fe f999 	bl	800056a <_isatty>
 8002238:	1c43      	adds	r3, r0, #1
 800223a:	d102      	bne.n	8002242 <_isatty_r+0x1a>
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	b103      	cbz	r3, 8002242 <_isatty_r+0x1a>
 8002240:	602b      	str	r3, [r5, #0]
 8002242:	bd38      	pop	{r3, r4, r5, pc}
 8002244:	20000564 	.word	0x20000564

08002248 <_lseek_r>:
 8002248:	b538      	push	{r3, r4, r5, lr}
 800224a:	4605      	mov	r5, r0
 800224c:	4608      	mov	r0, r1
 800224e:	4611      	mov	r1, r2
 8002250:	2200      	movs	r2, #0
 8002252:	4c05      	ldr	r4, [pc, #20]	; (8002268 <_lseek_r+0x20>)
 8002254:	6022      	str	r2, [r4, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	f7fe f991 	bl	800057e <_lseek>
 800225c:	1c43      	adds	r3, r0, #1
 800225e:	d102      	bne.n	8002266 <_lseek_r+0x1e>
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	b103      	cbz	r3, 8002266 <_lseek_r+0x1e>
 8002264:	602b      	str	r3, [r5, #0]
 8002266:	bd38      	pop	{r3, r4, r5, pc}
 8002268:	20000564 	.word	0x20000564

0800226c <__malloc_lock>:
 800226c:	4770      	bx	lr

0800226e <__malloc_unlock>:
 800226e:	4770      	bx	lr

08002270 <_read_r>:
 8002270:	b538      	push	{r3, r4, r5, lr}
 8002272:	4605      	mov	r5, r0
 8002274:	4608      	mov	r0, r1
 8002276:	4611      	mov	r1, r2
 8002278:	2200      	movs	r2, #0
 800227a:	4c05      	ldr	r4, [pc, #20]	; (8002290 <_read_r+0x20>)
 800227c:	6022      	str	r2, [r4, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	f7fe f93c 	bl	80004fc <_read>
 8002284:	1c43      	adds	r3, r0, #1
 8002286:	d102      	bne.n	800228e <_read_r+0x1e>
 8002288:	6823      	ldr	r3, [r4, #0]
 800228a:	b103      	cbz	r3, 800228e <_read_r+0x1e>
 800228c:	602b      	str	r3, [r5, #0]
 800228e:	bd38      	pop	{r3, r4, r5, pc}
 8002290:	20000564 	.word	0x20000564

08002294 <_init>:
 8002294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002296:	bf00      	nop
 8002298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229a:	bc08      	pop	{r3}
 800229c:	469e      	mov	lr, r3
 800229e:	4770      	bx	lr

080022a0 <_fini>:
 80022a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a2:	bf00      	nop
 80022a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a6:	bc08      	pop	{r3}
 80022a8:	469e      	mov	lr, r3
 80022aa:	4770      	bx	lr
